<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>5 Surprises to expect when learning Python</title>
      <link href="/blog/5-surprises-to-expect-when-learning-python/"/>
      <url>/blog/5-surprises-to-expect-when-learning-python/</url>
      
        <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>When Java is your everyday language, and you encounter Python occasionally as part of your day-to-day routine, Python can seem to be a bliss: you don’t need to go through docs or learn the language first in order to understand simple scripts written in Python. That’s when you realise the beauty of the language, but never seem to bother much about it. </p><p>Then there comes a point in time where you now want to write some Python code and the ability to simply read Python code does not suffice. You go to your favourite place to learn about new technology - i.e. the official docs. And while you are learning about it, in your mind you are comparing the features with your favourite (till now?) language: Java. You come across some “AHA!” moments and some “WTF?” moments.</p><p>Here are 5 such moments I faced when going through the same process of learning Python as a Java developer (leaving the categorisation between “AHA!” And “WTF?” to the reader’s imagination):</p><h2 id="The-5-surprises"><a href="#The-5-surprises" class="headerlink" title="The 5 surprises"></a>The 5 surprises</h2><h3 id="1-Docstrings-inside-functions"><a href="#1-Docstrings-inside-functions" class="headerlink" title="(1) Docstrings inside functions"></a>(1) Docstrings inside functions</h3><p>I really like the customisations we can do in the Javadoc comments over classes, methods etc. I heavily use a lot of <a href="http://www.drjava.org/docs/user/ch10.html#javadoc-writing">tags</a> while documenting stuff. </p><p>In Python, when I saw the docstrings are meant to be written inside the function definitions, it looked like an unclean approach! I mean, just compare the code documentation in the below examples:</p><p><strong>Example 1: JavaDoc in Java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Returns an Image object that can then be painted on the screen. </span></span><br><span class="line"><span class="comment">* The url argument must specify an absolute &lt;a href=&quot;#&#123;<span class="doctag">@link</span>&#125;&quot;&gt;&#123;<span class="doctag">@link</span> URL&#125;&lt;/a&gt;. The name</span></span><br><span class="line"><span class="comment">* argument is a specifier that is relative to the url argument. </span></span><br><span class="line"><span class="comment">* &lt;p&gt;</span></span><br><span class="line"><span class="comment">* This method always returns immediately, whether or not the </span></span><br><span class="line"><span class="comment">* image exists. When this applet attempts to draw the image on</span></span><br><span class="line"><span class="comment">* the screen, the data will be loaded. The graphics primitives </span></span><br><span class="line"><span class="comment">* that draw the image will incrementally paint on the screen. </span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span>  url  an absolute URL giving the base location of the image</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span>  name the location of the image, relative to the url argument</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span>      the image at the specified URL</span></span><br><span class="line"><span class="comment">* <span class="doctag">@see</span>         Image</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Image <span class="title">getImage</span><span class="params">(URL url, String name)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getImage(<span class="keyword">new</span> URL(url, name));</span><br><span class="line">    &#125; <span class="keyword">catch</span> (MalformedURLException e) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Example 2: DocString in Python</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">example_generator</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Generators have a ``Yields`` section instead of a ``Returns`` section.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        n (int): The upper limit of the range to generate, from 0 to `n` - 1.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Yields:</span></span><br><span class="line"><span class="string">        int: The next number in the range of 0 to `n` - 1.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Examples:</span></span><br><span class="line"><span class="string">        Examples should be written in doctest format, and should illustrate how</span></span><br><span class="line"><span class="string">        to use the function.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; print([i for i in example_generator(4)])</span></span><br><span class="line"><span class="string">        [0, 1, 2, 3]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        <span class="keyword">yield</span> i</span><br></pre></td></tr></table></figure><p>I tried to find a reasoning behind why this would be the case in Python, but looks like there doesn’t exist an official explanation. One possible reason and the only benefit I could think of is that in Python, unlike Java, we can access the doc through code using the <code>__doc__</code> utility, hence making it easy for the compiler to extract the doc from within the function than messing it up when trying to find it outside the function. </p><h3 id="2-Default-value-evaluates-only-once"><a href="#2-Default-value-evaluates-only-once" class="headerlink" title="(2) Default value evaluates only once"></a>(2) Default value evaluates only once</h3><p>In Python, a function like this will accumulate the arguments passed to it on subsequent calls:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">a, L=[]</span>):</span></span><br><span class="line">    L.append(a)</span><br><span class="line">    <span class="keyword">return</span> L</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(f(<span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(f(<span class="number">2</span>))</span><br><span class="line"><span class="built_in">print</span>(f(<span class="number">3</span>))</span><br></pre></td></tr></table></figure><p>This will print:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[1]</span><br><span class="line">[1, 2]</span><br><span class="line">[1, 2, 3]</span><br></pre></td></tr></table></figure><p>To avoid this and make this work in the Java-expected way (of not sharing the arguments between function calls), we need to put in extra efforts:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">a, L=<span class="literal">None</span></span>):</span></span><br><span class="line">    <span class="keyword">if</span> L <span class="keyword">in</span> <span class="literal">None</span>:</span><br><span class="line">        L=[]</span><br><span class="line">    L.append(a)</span><br><span class="line">    <span class="keyword">return</span> L</span><br></pre></td></tr></table></figure><h3 id="3-Mixed-casing"><a href="#3-Mixed-casing" class="headerlink" title="(3) Mixed casing"></a>(3) Mixed casing</h3><p>The naming of classes and functions is inconsistent. For classes, <code>UpperCamelCase</code> is the convention, while for functions and methods, <code>lowercase_with_underscores</code> is the convention.</p><p><em>(unclean_approach++?)</em></p><h3 id="4-No-private-attributes-inside-classes"><a href="#4-No-private-attributes-inside-classes" class="headerlink" title="(4) No private attributes inside classes"></a>(4) No private attributes inside classes</h3><p>Like whattt. But there exist a lot of hacks around the idea of private attributes in Python that require developer discipline. The language itself isn’t restricting the developer to misuse the phenomena!</p><h3 id="5-The-“Batteries-included-philosophy”"><a href="#5-The-“Batteries-included-philosophy”" class="headerlink" title="(5) The “Batteries included philosophy”"></a>(5) The “Batteries included philosophy”</h3><p>The Python source distribution has a rich and versatile standard library that is immediately available, without making the user download separate packages.</p><p>Functionality like formatting strings, json conversion, sending emails - are a few utilities among many which are available out of the box.</p><p>Think of doing the same in Java? Get ready to deal with JARs, or introduce dependency management tools like Maven!</p><h2 id="Final-words"><a href="#Final-words" class="headerlink" title="Final words"></a>Final words</h2><p>There are multiple other nuances in Python and Java but these 5 top the list for me which trigger my OCD associated with clean code (some in good ways and some in bad).</p><p>Let me know in the comments section what were some of your “AHA!” and “WTF?” moments!</p>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
      </categories>
      
      
        <tags>
            
            <tag> #java </tag>
            
            <tag> #python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Organising Sequential Code Flow in Java with Easy-Workflow</title>
      <link href="/blog/organising-sequential-code-flow-in-java-with-easy-workflow/"/>
      <url>/blog/organising-sequential-code-flow-in-java-with-easy-workflow/</url>
      
        <content type="html"><![CDATA[<h2 id="The-Philosophy"><a href="#The-Philosophy" class="headerlink" title="The Philosophy"></a>The Philosophy</h2><p><em><span class="github-emoji" alias="grey_exclamation" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2755.png?v8">&#x2755;</span> Skip this section if you are not interested in the philosophy of good software engineering, and want to jump straight to the relevant stuff.</em></p><p>Software engineering <em>(the art)</em> is an interesting space in many aspects. One such aspect is the fact that the same tools can be used to solve a myriad of problems. To solve these problems, there can be numerous ways, none being perfect. At the same time, every solution has scope for improvement.</p><p>Software engineers’ <em>(the artist)</em> task is to take care of all these trade-offs and select the best approach to solve the business use-cases in a reasonable time, along with taking care of the software best practices along the way.</p><p>Enough of philosophy. Let’s get to the point now.</p><h2 id="The-Lazy-Long-Step-Based-Methods"><a href="#The-Lazy-Long-Step-Based-Methods" class="headerlink" title="The Lazy, Long Step-Based Methods"></a>The Lazy, Long Step-Based Methods</h2><p>Most of us may have come across situations where we need to implement algorithms that are sequential in manner. They simply require you to implement step 1, then step 2 and so on.</p><p>A naive implementation can simply have a method that handles all the steps. You can already see this method bloating, forget about its future maintenance.</p><p>In a relatively more mature implementation, the method call will be broken down into sub-methods, and the code may look something like this:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SomeAlgorithm</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">runAlgorithm</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        performStep1();</span><br><span class="line">        performStep2();</span><br><span class="line">        performStep3();</span><br><span class="line">        <span class="comment">// and so on...</span></span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">performStep1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">performStep2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">performStep3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Okay still better. But <em>(if you read the philosophy section above)</em>, no solution is perfect. Do you see where this approach can go wrong?</p><p>Let’s take an example. Suppose <code>performStep1()</code> requires you to gather data from some third party application, and then in the rest of the steps you are actually performing the algorithm. Maybe in one of the last few steps you want to write to the database. See what’s happening? This class is now handling so many things apart from the algorithm itself. <em>Separation of concerns?</em> Boom. Lost. </p><p>Hmm. So what can we do about it? Maybe we start thinking in terms of Object Oriented Principles and create different classes for each of these not-so-related tasks. This approach does make sense but only to the extent in which you were dealing with such a scenario once or twice in an application.</p><p>What if you expect the implementation of such algorithms at many places inside the codebase? So many classes, each handling different logic; but still kind of similar be a part of one single long-running algorithm. Feels chaotic already?</p><p>That’s where you need to start considering such problems as long-running tasks, which will not only help in doing away with bloated classes but also managing the algorithms in a streamlined manner. </p><p>This was one such problem I faced recently, and this article is about how I went on looking at these problems as “workflows” and creating a common solution for implementing them. I created a solution which I call the “Easy-Workflow”.</p><h2 id="Easy-Workflow-goodbye-long-methods"><a href="#Easy-Workflow-goodbye-long-methods" class="headerlink" title="Easy-Workflow - goodbye long methods!"></a>Easy-Workflow - goodbye long methods!</h2><h3 id="Why"><a href="#Why" class="headerlink" title="Why?"></a>Why?</h3><p>Many Java enterprise applications require processing to be executed in a context separate from that of the main system. In many cases, these backend processes perform several tasks, with some tasks dependent upon a previous task’s status. With the requirement of interdependent processing tasks, an implementation using a single procedural-style set of method calls usually proves inadequate. Utilizing Spring, a developer can easily separate a backend process into an aggregation of activities. Easy-Workflow helps to streamline this process.</p><h3 id="What"><a href="#What" class="headerlink" title="What?"></a>What?</h3><p>Easy-Workflow aims to make sequential and/or parallel execution of independent yet related activities in a more organized manner. It lets you define your desired workflow with independent activities. The definition of these activities can be provided by the client as per business needs. It comes with functionality such as contexts and customizable error handlers.</p><h3 id="When-to-use"><a href="#When-to-use" class="headerlink" title="When to use?"></a>When to use?</h3><p>In Easy-Workflow’s jargon, a workflow can be defined as a set of activities performed in a predetermined order without user interaction.</p><p>This approach, however, is not suggested as a replacement for existing workflow frameworks. For scenarios where more advanced interactions are necessarily based on user input, a standalone open-source or commercial workflow engine is better equipped.</p><p>If the workflow tasks at hand are simplistic, then the Easy-Workflow approach makes more sense, especially if Spring is already in use.</p><h3 id="Requirements"><a href="#Requirements" class="headerlink" title="Requirements"></a>Requirements</h3><ul><li>Java</li><li>Spring</li><li>Easy-Workflow JAR</li></ul><h3 id="Features"><a href="#Features" class="headerlink" title="Features"></a>Features</h3><ul><li>Interact with Spring using both XML-based Configuration and Annotation-based Configuration</li><li>Pass information between activities using <em>WorkflowContext</em></li><li>Customize <em>ErrorHandlers</em> at a per-activity level as well as a default-workflow level</li><li>Get detailed <em>WorkflowReport</em> once execution of Workflow is over</li></ul><h2 id="Architecture"><a href="#Architecture" class="headerlink" title="Architecture"></a>Architecture</h2><p>Easy-Workflow consists of the following components:</p><h3 id="Workflow-Engine"><a href="#Workflow-Engine" class="headerlink" title="Workflow Engine"></a>Workflow Engine</h3><p>A place to kick-start your workflow.</p><h3 id="Workflow"><a href="#Workflow" class="headerlink" title="Workflow"></a>Workflow</h3><p>A set of activities performed in a predetermined order without user interaction. The activities can be configured to either run in sequence, or in parallel, or using a hybrid approach.</p><h3 id="Activity"><a href="#Activity" class="headerlink" title="Activity"></a>Activity</h3><p>A single unit of work that can be performed independently. This is where the business logic needs to be defined.</p><h3 id="WorkflowContext"><a href="#WorkflowContext" class="headerlink" title="WorkflowContext"></a>WorkflowContext</h3><p>A utility to pass around information between different activities of a workflow. It can also be used to provide a seed to the first activity of the workflow.</p><h3 id="WorkflowReport"><a href="#WorkflowReport" class="headerlink" title="WorkflowReport"></a>WorkflowReport</h3><p>A unit that gives all details about how the workflow finished and contains any messages/errors to be returned to the caller.</p><h3 id="WorkflowStatus"><a href="#WorkflowStatus" class="headerlink" title="WorkflowStatus"></a>WorkflowStatus</h3><p>An enum to represent the status in which the workflow could have ended like completed, failed, stopped, or no operation.</p><h2 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h2><h3 id="Simple-Workflow-with-XML-based-Configuration"><a href="#Simple-Workflow-with-XML-based-Configuration" class="headerlink" title="Simple Workflow with XML-based Configuration"></a>Simple Workflow with XML-based Configuration</h3><p>Let’s take an example of a very simple workflow where three activities run in a sequential manner, and any error encountered while running these activities needs to be handled gracefully. We will explore the implementation with the help of an XML-based configuration. </p><p><img src="/blog/organising-sequential-code-flow-in-java-with-easy-workflow/SimpleWorkflow.png"></p><h4 id="beans-xml"><a href="#beans-xml" class="headerlink" title="beans.xml"></a>beans.xml</h4><p>This is the starting point of the workflow, where the bean definitions, as well as the workflow definition, is provided. In the first few lines, we have the bean definitions of <code>Activity1</code>, <code>Activity2</code>, <code>Activity3</code> along with <code>SimpleErrorHandler</code> and <code>SimpleContext</code>. Here, activities are custom implementations that will contain the business logic, and <code>SimpleErrorHandler</code> and <code>SimpleContext</code> are very basic implementations of <em>ErrorHandler</em> and <em>WorkflowContext</em>, respectively.</p><p>In the latter half of the code, we can see the definition of the workflow. The property <code>activities</code> is a list that actually defines all the activities (beans) that will run. They run in the order of the sequence defined in this list. This is the section which ties all the components of a workflow together, hence the mapping of <em>ErrorHandler</em> and <em>WorkflowContext</em> beans also exists here.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;activity1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;deeheem.coffeestore.examples.simple.Activity1&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;activity2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;deeheem.coffeestore.examples.simple.Activity2&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;activity3&quot;</span> <span class="attr">class</span>=<span class="string">&quot;deeheem.coffeestore.examples.simple.Activity3&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;defaultErrorHandler&quot;</span> <span class="attr">class</span>=<span class="string">&quot;deeheem.coffeestore.examples.simple.SimpleErrorHandler&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;simpleContext&quot;</span> <span class="attr">class</span>=<span class="string">&quot;deeheem.coffeestore.examples.simple.SimpleContext&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;prototype&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- simple workflow  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;simpleWorkflow&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.deeheem.easyworkflow.domain.workflow.DefaultWorkflow&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;activities&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;activity1&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;activity2&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;activity3&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;defaultErrorHandler&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;defaultErrorHandler&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;workflowContext&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;simpleContext&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Activity1-java"><a href="#Activity1-java" class="headerlink" title="Activity1.java"></a>Activity1.java</h4><p>Notice that the activities need to extend <code>BaseActivity</code> class which implements the interface <code>Activity</code>. <code>Base Activity</code> is an abstract implementation of <code>Activity</code> designed for re-use by business-specific activities. Both <code>BaseActivity</code> and <code>Activity</code> are present in the Easy-Workflow JAR itself.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Activity1</span> <span class="keyword">extends</span> <span class="title">BaseActivity</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(WorkflowContext context)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// business logic goes here</span></span><br><span class="line">        System.out.println(<span class="string">&quot;EXECUTE Activity1&quot;</span>);</span><br><span class="line">        SimpleContext simpleContext = (SimpleContext) context;</span><br><span class="line">        simpleContext.put(<span class="string">&quot;message1&quot;</span>, <span class="string">&quot;Data from Activity1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Activity2-java"><a href="#Activity2-java" class="headerlink" title="Activity2.java"></a>Activity2.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Activity2</span> <span class="keyword">extends</span> <span class="title">BaseActivity</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(WorkflowContext context)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// business logic goes here</span></span><br><span class="line">        System.out.println(<span class="string">&quot;EXECUTE Activity2&quot;</span>);</span><br><span class="line">        SimpleContext simpleContext = (SimpleContext) context;</span><br><span class="line">        simpleContext.put(<span class="string">&quot;message2&quot;</span>, <span class="string">&quot;Data from Activity2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Activity3-java"><a href="#Activity3-java" class="headerlink" title="Activity3.java"></a>Activity3.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Activity3</span> <span class="keyword">extends</span> <span class="title">BaseActivity</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(WorkflowContext context)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// business logic goes here</span></span><br><span class="line">        System.out.println(<span class="string">&quot;EXECUTE Activity3&quot;</span>);</span><br><span class="line">        SimpleContext simpleContext = (SimpleContext) context;</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, Object&gt; entry : simpleContext.getEntrySet()) &#123;</span><br><span class="line">            System.out.println(entry.getKey() + <span class="string">&quot;: &quot;</span> + entry.getValue());</span><br><span class="line">            System.out.println(entry.getKey() + <span class="string">&quot;: &quot;</span> + entry.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// uncomment the below line to invoke the error handler</span></span><br><span class="line">        <span class="comment">// throw new Exception(&quot;let&#x27;s see the error&quot;);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="SimpleContext-java"><a href="#SimpleContext-java" class="headerlink" title="SimpleContext.java"></a>SimpleContext.java</h4><p>SimpleContext implements the interface <code>WorkflowContext</code> provided in the Easy-Workflow JAR. </p><ul><li><code>setSeedData()</code> method can be used to provide information to the workflow at the time of kickoff, which may be required by other activities during the workflow run.</li><li><code>shouldWorkflowStop()</code> method is used by individual activities to inform the workflow to stop processing further due to some requirement/condition reached in the business logic. Note that this is <strong>not the same as</strong> the ability of the error handler to stop the workflow in case an error is encountered (something we will see in the next section). Instead, this particular function is used for handling business logic conditions rather than error scenarios.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleContext</span> <span class="keyword">implements</span> <span class="title">WorkflowContext</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SEED_DATA = <span class="string">&quot;seedData&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> AtomicBoolean stopProcess;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, Object&gt; context = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;(); <span class="comment">// to make it thread-safe</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSeedData</span><span class="params">(Object seedObject)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.put(SEED_DATA, seedObject);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AtomicBoolean <span class="title">shouldWorkflowStop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stopProcess;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStopProcess</span><span class="params">(AtomicBoolean stopProcess)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.stopProcess = stopProcess;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(String key, Object value)</span> </span>&#123;</span><br><span class="line">        context.put(key, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">get</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> context.get(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Set&lt;Map.Entry&lt;String, Object&gt;&gt; getEntrySet() &#123;</span><br><span class="line">        <span class="keyword">return</span> context.entrySet();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="SimpleErrorHandler-java"><a href="#SimpleErrorHandler-java" class="headerlink" title="SimpleErrorHandler.java"></a>SimpleErrorHandler.java</h4><p>SimpleErrorHandler implements the interface <code>ErrorHandler</code> provided in the Easy-Workflow JAR, which defines a strategy for handling errors/exceptions which may arise during the execution of an activity.  </p><ul><li><code>handleError()</code> handles the given error, possibly rethrowing it as a fatal exception.</li><li>It is up to the developer to decide how to handle the error inside this method.</li><li>This method can also be used to handle errors from composite activities like <code>ConcurrentActivity</code> (discussed in upcoming sections).</li><li>If you notice, the return type of this method is <code>boolean</code>. This specifies whether the execution of workflow needs to be stopped on encountering an error, and can be customized by the developer implementing the business logic based on the needs.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleErrorHandler</span> <span class="keyword">implements</span> <span class="title">ErrorHandler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String beanName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">handleError</span><span class="params">(WorkflowContext context, Exception exception)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBeanName</span><span class="params">(String beanName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.beanName = beanName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Complex-Workflow-with-XML-based-Configuration"><a href="#Complex-Workflow-with-XML-based-Configuration" class="headerlink" title="Complex Workflow with XML-based Configuration"></a>Complex Workflow with XML-based Configuration</h3><p>Now let’s take a more complicated example consisting of parallel activity runs, in a combination with some activities which run in sequence.</p><p><img src="/blog/organising-sequential-code-flow-in-java-with-easy-workflow/ComplexWorkflow.png"></p><p>As shown in the diagram above, two activities run in parallel and once both of them have completed their execution, the flow then passes to the other two activities. Notice that the error handlers are different for concurrent and sequential executions.</p><p>On a side note, you can also define your own custom error handler on as many of the activities as you like.</p><h4 id="beans-xml-1"><a href="#beans-xml-1" class="headerlink" title="beans.xml"></a>beans.xml</h4><p>Similar to the previous example, this is the starting point of the workflow. Let’s focus on the special beans here.</p><p><code>c_activity1</code> represents Activity 1 which runs two sub-activities concurrently. We define these sub-activities inside the property <code>parallelActivities</code> as list, although note that the order inside this list does not matter during execution since the beans in the list <code>c_pActivity1</code> and <code>c_pActivity2</code> will run in parallel.</p><p>Inside the workflow definition, we have defined activities <code>c_activity1</code>, <code>c_activity2</code> and <code>c_activity3</code> to run in sequence, hence completing our objective of running the workflow as per the diagram.</p><p>Note that in the case of complex workflows with concurrent activities, we have the option to define the <code>maxThreadPoolSize</code> to control how many threads at the maximum do we want to spawn during the workflow run.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;c_pActivity1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;deeheem.coffeestore.examples.complex.PActivity1&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;c_pActivity2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;deeheem.coffeestore.examples.complex.PActivity2&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;c_activity1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;deeheem.coffeestore.examples.complex.Activity1&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;parallelActivities&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;c_pActivity1&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;c_pActivity2&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;errorHandler&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;c_concurrentErrorHandler&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;c_activity2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;deeheem.coffeestore.examples.complex.Activity2&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;c_activity3&quot;</span> <span class="attr">class</span>=<span class="string">&quot;deeheem.coffeestore.examples.complex.Activity3&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;c_defaultErrorHandler&quot;</span> <span class="attr">class</span>=<span class="string">&quot;deeheem.coffeestore.examples.complex.SimpleErrorHandler&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;c_concurrentErrorHandler&quot;</span> <span class="attr">class</span>=<span class="string">&quot;deeheem.coffeestore.examples.complex.ConcurrentErrorHandler&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;c_simpleContext&quot;</span> <span class="attr">class</span>=<span class="string">&quot;deeheem.coffeestore.examples.complex.SimpleContext&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;prototype&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- complex workflow  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;complexWorkflow&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.deeheem.easyworkflow.domain.workflow.DefaultWorkflow&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;activities&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;c_activity1&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;c_activity2&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;c_activity3&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;defaultErrorHandler&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;c_defaultErrorHandler&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;workflowContext&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;c_simpleContext&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxThreadPoolSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;4&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="PActivity1-java"><a href="#PActivity1-java" class="headerlink" title="PActivity1.java"></a>PActivity1.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PActivity1</span> <span class="keyword">extends</span> <span class="title">BaseActivity</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(WorkflowContext context)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;EXECUTE PActivity1&quot;</span>);</span><br><span class="line">        SimpleContext simpleContext = (SimpleContext) context;</span><br><span class="line">        simpleContext.put(<span class="string">&quot;message1&quot;</span>, <span class="string">&quot;Data from PActivity1&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// note: uncomment below lines to see how exception is handled in parallel activities</span></span><br><span class="line">        <span class="comment">//        int b=0;</span></span><br><span class="line">        <span class="comment">//        try &#123;</span></span><br><span class="line">        <span class="comment">//            int c = 10 / b;</span></span><br><span class="line">        <span class="comment">//        &#125; catch (Exception e) &#123;</span></span><br><span class="line">        <span class="comment">//            System.out.println(&quot;test exception&quot;);</span></span><br><span class="line">        <span class="comment">//            throw new Exception(&quot;test exception&quot;, e);</span></span><br><span class="line">        <span class="comment">//        &#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="PActivity2-java"><a href="#PActivity2-java" class="headerlink" title="PActivity2.java"></a>PActivity2.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PActivity2</span> <span class="keyword">extends</span> <span class="title">BaseActivity</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(WorkflowContext context)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;EXECUTE PActivity2&quot;</span>);</span><br><span class="line">        SimpleContext simpleContext = (SimpleContext) context;</span><br><span class="line">        simpleContext.put(<span class="string">&quot;message2&quot;</span>, <span class="string">&quot;Data from PActivity2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Activity1-java-1"><a href="#Activity1-java-1" class="headerlink" title="Activity1.java"></a>Activity1.java</h4><p>Note that <code>Activity1</code> needs to extend <code>ConcurrentActivity</code> in order to support concurrent execution of the sub-activities.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Activity1</span> <span class="keyword">extends</span> <span class="title">ConcurrentActivity</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(WorkflowContext context)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;EXECUTE Activity1&quot;</span>);</span><br><span class="line">        SimpleContext simpleContext = (SimpleContext) context;</span><br><span class="line">        simpleContext.put(<span class="string">&quot;message1&quot;</span>, <span class="string">&quot;Data from Activity1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Activity2-java-1"><a href="#Activity2-java-1" class="headerlink" title="Activity2.java"></a>Activity2.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Activity2</span> <span class="keyword">extends</span> <span class="title">BaseActivity</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(WorkflowContext context)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;EXECUTE Activity2&quot;</span>);</span><br><span class="line">        SimpleContext simpleContext = (SimpleContext) context;</span><br><span class="line">        simpleContext.put(<span class="string">&quot;message2&quot;</span>, <span class="string">&quot;Data from Activity2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Activity3-java-1"><a href="#Activity3-java-1" class="headerlink" title="Activity3.java"></a>Activity3.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Activity3</span> <span class="keyword">extends</span> <span class="title">BaseActivity</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(WorkflowContext context)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;EXECUTE Activity3&quot;</span>);</span><br><span class="line">        SimpleContext simpleContext = (SimpleContext) context;</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, Object&gt; entry : simpleContext.getEntrySet()) &#123;</span><br><span class="line">            System.out.println(entry.getKey() + <span class="string">&quot;: &quot;</span> + entry.getValue());</span><br><span class="line">            System.out.println(entry.getKey() + <span class="string">&quot;: &quot;</span> + entry.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//   throw new Exception(&quot;let&#x27;s see the error&quot;);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="SimpleContext-java-1"><a href="#SimpleContext-java-1" class="headerlink" title="SimpleContext.java"></a>SimpleContext.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleContext</span> <span class="keyword">implements</span> <span class="title">WorkflowContext</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SEED_DATA = <span class="string">&quot;seedData&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> AtomicBoolean stopProcess;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, Object&gt; context = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;(); <span class="comment">// to make it thread-safe</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSeedData</span><span class="params">(Object seedObject)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.put(SEED_DATA, seedObject);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AtomicBoolean <span class="title">shouldWorkflowStop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stopProcess;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStopProcess</span><span class="params">(AtomicBoolean stopProcess)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.stopProcess = stopProcess;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(String key, Object value)</span> </span>&#123;</span><br><span class="line">        context.put(key, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">get</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> context.get(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Set&lt;Map.Entry&lt;String, Object&gt;&gt; getEntrySet() &#123;</span><br><span class="line">        <span class="keyword">return</span> context.entrySet();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="SimpleErrorHandler-java-1"><a href="#SimpleErrorHandler-java-1" class="headerlink" title="SimpleErrorHandler.java"></a>SimpleErrorHandler.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleErrorHandler</span> <span class="keyword">implements</span> <span class="title">ErrorHandler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String beanName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">handleError</span><span class="params">(WorkflowContext context, Exception exception)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBeanName</span><span class="params">(String beanName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.beanName = beanName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Real-World-Workflow-with-Annotation-based-Configuration"><a href="#Real-World-Workflow-with-Annotation-based-Configuration" class="headerlink" title="Real-World Workflow with Annotation-based Configuration"></a>Real-World Workflow with Annotation-based Configuration</h3><p><em><span class="github-emoji" alias="grey_exclamation" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2755.png?v8">&#x2755;</span> Disclaimer: The example in this section, even though termed as a “Real-World Workflow”, is still fictional and may not directly apply to suit similar use-cases.</em></p><p>Imagine you are a developer of an app for a store specializing in different types of coffee. The store curates the best coffee from all over the world, and customers have the ability to subscribe to a monthly newsletter from where they can try out a new type of coffee every month. You, being very particular about the preferences of each customer, want the newsletter to be customised to each customer. <em>(Before we digress, we are not going the Machine Learning way. This is NOT an article on Machine Learning.)</em> </p><p>Now as always, the problem has many nuances and can be solved in multiple ways. Let’s explore one such way a typical store might want to solve it: from all the coffee available at the store, enhance the existing data with customer’s preferences, manufacturer details, tailored prices, and then save the details for notifying the customers at a relevant point in time.</p><p>If we think of the Easy-Workflow approach, we can easily break down the problem in the following way:</p><p><img src="/blog/organising-sequential-code-flow-in-java-with-easy-workflow/RealWorkflow.png"></p><p>Makes sense? </p><p>Note that whenever you trying to break down the problem into a flowchart like this to make use of Easy-Workflow, make sure that you create a Directed Acyclic Graph (DAG).</p><h4 id="CoffeeNewsletterConfiguration-java"><a href="#CoffeeNewsletterConfiguration-java" class="headerlink" title="CoffeeNewsletterConfiguration.java"></a>CoffeeNewsletterConfiguration.java</h4><p>Let’s see how we can create the beans for this application using annotation-based approach.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CoffeeNewsletterConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ---- Error Handlers ----</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(value = &quot;parallelErrorHandler&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ErrorHandler <span class="title">parallelErrorHandler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ParallelErrorHandler();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(value = &quot;fallbackErrorHandler&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ErrorHandler <span class="title">fallbackErrorHandler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> FallbackErrorHandler();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ---- Activities ----</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(value = &quot;activity_A&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BaseActivity <span class="title">coffeeDetailsActivity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CoffeeDetailsActivity();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(value = &quot;activity_B1&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BaseActivity <span class="title">manufacturerDetailsActivity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ManufacturerDetailsActivity();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean(value = &quot;activity_B2&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BaseActivity <span class="title">priceCalculatorActivity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> PriceCalculatorActivity();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(value = &quot;activity_B3&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BaseActivity <span class="title">customerPreferenceActivity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CustomerPreferenceActivity();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(value = &quot;activity_B&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BaseActivity <span class="title">parallelDataActivity</span><span class="params">(<span class="meta">@Qualifier(&quot;activity_B1&quot;)</span> BaseActivity activityA,</span></span></span><br><span class="line"><span class="params"><span class="function">                                            <span class="meta">@Qualifier(&quot;activity_B2&quot;)</span> BaseActivity activityB,</span></span></span><br><span class="line"><span class="params"><span class="function">                                            <span class="meta">@Qualifier(&quot;activity_B3&quot;)</span> BaseActivity activityC,</span></span></span><br><span class="line"><span class="params"><span class="function">                                            <span class="meta">@Qualifier(&quot;parallelErrorHandler&quot;)</span> ErrorHandler errorHandler)</span> </span>&#123;</span><br><span class="line">        List&lt;BaseActivity&gt; activities = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        activities.add(activityA);</span><br><span class="line">        activities.add(activityB);</span><br><span class="line">        activities.add(activityC);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ParallelDataActivity(activities, errorHandler);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(value = &quot;activity_C&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BaseActivity <span class="title">combineCoffeeDetailsActivity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CombineCoffeeDetailsActivity();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(value = &quot;activity_D&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BaseActivity <span class="title">saveActivity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SaveActivity();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ---- Context ----</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(value = &quot;workflowContext&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> WorkflowContext <span class="title">workflowContext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ThisWorkflowContext();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ---- Workflow ----</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DefaultWorkflow <span class="title">coffeeNewsletterWorkflow</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">            <span class="meta">@Qualifier(&quot;workflowContext&quot;)</span> WorkflowContext workflowContext,</span></span></span><br><span class="line"><span class="params"><span class="function">            <span class="meta">@Qualifier(&quot;fallbackErrorHandler&quot;)</span> ErrorHandler errorHandler,</span></span></span><br><span class="line"><span class="params"><span class="function">            <span class="meta">@Qualifier(&quot;activity_A&quot;)</span> BaseActivity activityA,</span></span></span><br><span class="line"><span class="params"><span class="function">            <span class="meta">@Qualifier(&quot;activity_B&quot;)</span> BaseActivity activityB,</span></span></span><br><span class="line"><span class="params"><span class="function">            <span class="meta">@Qualifier(&quot;activity_C&quot;)</span> BaseActivity activityC,</span></span></span><br><span class="line"><span class="params"><span class="function">            <span class="meta">@Qualifier(&quot;activity_D&quot;)</span> BaseActivity activityD)</span> </span>&#123;</span><br><span class="line">        List&lt;Activity&gt; activityList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        activityList.add(activityA);</span><br><span class="line">        activityList.add(activityB);</span><br><span class="line">        activityList.add(activityC);</span><br><span class="line">        activityList.add(activityD);</span><br><span class="line"></span><br><span class="line">        DefaultWorkflow defaultWorkflow = <span class="keyword">new</span> DefaultWorkflow();</span><br><span class="line">        defaultWorkflow.setActivities(activityList);</span><br><span class="line">        defaultWorkflow.setDefaultErrorHandler(errorHandler);</span><br><span class="line">        defaultWorkflow.setWorkflowContext(workflowContext);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> defaultWorkflow;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Notice that <code>ParallelErrorHandler</code> is being used for handling errors occurring in the concurrent execution, i.e. inside the bean definition <code>activity_B</code>. Also <code>FallbackErrorHandler</code> is the common handler which the workflow uses across all activities.</p><h4 id="CoffeeDetailsActivity-java"><a href="#CoffeeDetailsActivity-java" class="headerlink" title="CoffeeDetailsActivity.java"></a>CoffeeDetailsActivity.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CoffeeDetailsActivity</span> <span class="keyword">extends</span> <span class="title">BaseActivity</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    CoffeeDetailsFetcherService coffeeDetailsFetcherService; <span class="comment">// to fetch coffee details from DB</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(WorkflowContext context)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Inside CoffeeDetailsActivity&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Starting Coffee Sync&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            coffeeDetailsFetcherService.fetchCoffee();</span><br><span class="line">            <span class="comment">// rest of business logic here</span></span><br><span class="line">            <span class="comment">// <span class="doctag">NOTE:</span> you can pass on the data from this activity to the rest of the activities through the &quot;context&quot;, the implementation of which can be customized as per the needs. It can contains any data structures that will fit the business needs.</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Error in syncing coffee.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;Coffee Sync completed&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="ParallelDataActivity-java"><a href="#ParallelDataActivity-java" class="headerlink" title="ParallelDataActivity.java"></a>ParallelDataActivity.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ParallelDataActivity</span> <span class="keyword">extends</span> <span class="title">ConcurrentActivity</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ParallelDataActivity</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">            List&lt;BaseActivity&gt; parallelActivities,</span></span></span><br><span class="line"><span class="params"><span class="function">            ErrorHandler errorHandler)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.setParallelActivities(parallelActivities);</span><br><span class="line">        <span class="keyword">this</span>.setErrorHandler(errorHandler);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(WorkflowContext context)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Inside GetParallelDataActivity&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="ManufacturerDetailsActivity-java"><a href="#ManufacturerDetailsActivity-java" class="headerlink" title="ManufacturerDetailsActivity.java"></a>ManufacturerDetailsActivity.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ManufacturerDetailsActivity</span> <span class="keyword">extends</span> <span class="title">BaseActivity</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(WorkflowContext context)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Inside ManufacturerDetailsActivity&quot;</span>);</span><br><span class="line">        <span class="comment">// logic to get the manufacturer details and append it with the coffee details present in the context</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="PriceCalculatorActivity-java"><a href="#PriceCalculatorActivity-java" class="headerlink" title="PriceCalculatorActivity.java"></a>PriceCalculatorActivity.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PriceCalculatorActivity</span> <span class="keyword">extends</span> <span class="title">BaseActivity</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(WorkflowContext context)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Inside PriceCalculatorActivity&quot;</span>);</span><br><span class="line">        <span class="comment">// logic to tailor the price on various factors like place of origin, manufacturer details, profit margin, etc.</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="CustomerPreferenceActivity-java"><a href="#CustomerPreferenceActivity-java" class="headerlink" title="CustomerPreferenceActivity.java"></a>CustomerPreferenceActivity.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerPreferenceActivity</span> <span class="keyword">extends</span> <span class="title">BaseActivity</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(WorkflowContext context)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Inside CustomerPreferenceActivity&quot;</span>);</span><br><span class="line">        <span class="comment">// logic to integrate the information as per customer preferences according to the requirements</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="CombineCoffeeDetailsActivity-java"><a href="#CombineCoffeeDetailsActivity-java" class="headerlink" title="CombineCoffeeDetailsActivity.java"></a>CombineCoffeeDetailsActivity.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CombineCoffeeDetailsActivity</span> <span class="keyword">extends</span> <span class="title">BaseActivity</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(WorkflowContext context)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Inside CombineCoffeeDetailsActivity&quot;</span>);</span><br><span class="line">        <span class="comment">// logic to get all the data from the previous activities and combine it as per the needs</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="SaveActivity-java"><a href="#SaveActivity-java" class="headerlink" title="SaveActivity.java"></a>SaveActivity.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SaveActivity</span> <span class="keyword">extends</span> <span class="title">BaseActivity</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(WorkflowContext context)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Inside SaveActivity&quot;</span>);</span><br><span class="line">        <span class="comment">// logic to save the processed information so that it can be sent to the customers at an appropriate time</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="ThisWorkflowContext-java"><a href="#ThisWorkflowContext-java" class="headerlink" title="ThisWorkflowContext.java"></a>ThisWorkflowContext.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThisWorkflowContext</span> <span class="keyword">implements</span> <span class="title">WorkflowContext</span> </span>&#123;</span><br><span class="line">    <span class="comment">// as mentioned earlier, the data structures inside the context are totally customizable </span></span><br><span class="line">    <span class="comment">// some example are:</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;CoffeeDetail&gt; coffeeDetails;</span><br><span class="line">    <span class="keyword">private</span> List&lt;ManufacturerDetail&gt; manufacturerDetails;</span><br><span class="line">    <span class="comment">// note that this data is in-memory and is used to pass to other activities.</span></span><br><span class="line">    <span class="comment">// data used locally in one activity need not be present inside the context.</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// getters and setters for above...</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AtomicBoolean <span class="title">shouldWorkflowStop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>; <span class="comment">// true as we cannot tolerate any errors in any activity, and would ideally like the workflow to be stopped in case of errors</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSeedData</span><span class="params">(Object seedObject)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// here we can seed the workflow with any external data if we want, and then utilize the seed data in any of the activities</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="ParallelErrorHandler-java"><a href="#ParallelErrorHandler-java" class="headerlink" title="ParallelErrorHandler.java"></a>ParallelErrorHandler.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ParallelErrorHandler</span> <span class="keyword">implements</span> <span class="title">ErrorHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">handleError</span><span class="params">(WorkflowContext context, Exception exception)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBeanName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="FallbackErrorHandler-java"><a href="#FallbackErrorHandler-java" class="headerlink" title="FallbackErrorHandler.java"></a>FallbackErrorHandler.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FallbackErrorHandler</span> <span class="keyword">implements</span> <span class="title">ErrorHandler</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">handleError</span><span class="params">(WorkflowContext context, Exception exception)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBeanName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Starting-Workflow-Execution"><a href="#Starting-Workflow-Execution" class="headerlink" title="Starting Workflow Execution"></a>Starting Workflow Execution</h3><p>Starting a workflow execution is as simple as creating a <em>WorkflowEngine</em> and seeding it with:</p><ul><li>the workflow to be run</li><li>any seed data to be sent from the outside world</li></ul><p><code>DefaultWorkflowEngine</code> is a default implementation of <em>WorkflowEngine</em> provided inside the Easy-Workflow JAR.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WorkflowController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    Workflow coffeeNewsletterWorkflow;</span><br><span class="line">    </span><br><span class="line">    DefaultWorkflowEngine engine = <span class="keyword">new</span> WorkflowEngine();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">generateCoffeeNewsletter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        WorkflowReport report = engine.run(</span><br><span class="line">            coffeeNewsletterWorkflow, </span><br><span class="line">            <span class="keyword">null</span> <span class="comment">// replace with seed data you want to send to the workflow </span></span><br><span class="line">        );   </span><br><span class="line">        </span><br><span class="line">        <span class="comment">// retrieve status of workflow using:</span></span><br><span class="line">        report.getStatus();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// retrieve completion/failure message using:</span></span><br><span class="line">        report.getMessage();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// retrieve Throwable object in case of an error using:</span></span><br><span class="line">        report.getError();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// access workflowContext using:</span></span><br><span class="line">        report.getWorkflowContext();</span><br><span class="line">        <span class="comment">// above makes it possible to use context for sending the processed data to the outside workflow</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="The-Inabilities"><a href="#The-Inabilities" class="headerlink" title="The Inabilities"></a>The Inabilities</h2><p>Just like any software is not suitable for all the needs, Easy-Workflow is no exception. Though it is totally extendable for some more scenarios.</p><h3 id="State-Persistence"><a href="#State-Persistence" class="headerlink" title="State Persistence"></a>State Persistence</h3><p>Easy-Workflow maintains an in-memory state for now. This can be persisted after every activity which can reap up more benefits like:</p><ul><li>restarting the workflow mid-way</li><li>monitoring execution and analysing at a more granular level</li></ul><h3 id="Manual-Intervention"><a href="#Manual-Intervention" class="headerlink" title="Manual Intervention"></a>Manual Intervention</h3><p>Easy-Workflow is not suitable for workflows requiring manual intervention in some of the activities like pausing -&gt; noti<br>fying stakeholders -&gt; seeking approvals -&gt; then continuing the rest of the workflow on getting the approvals.</p><h3 id="Distributed-Workflow"><a href="#Distributed-Workflow" class="headerlink" title="Distributed Workflow"></a>Distributed Workflow</h3><p>Easy-Workflow runs the workflow on a single machine as of now. So to deal with larger data, it can be enhanced so that the activities run on different machines and the workflow can be controlled in a more distributed fashion.</p><p>Having said that, enhancing Easy-Workflow to solve for distributed use-cases steals our initial purpose: it’s not easy anymore! :)</p><h2 id="Final-Words"><a href="#Final-Words" class="headerlink" title="Final Words"></a>Final Words</h2><p>Do you now see how we were able to achieve separation of concerns in a concise and organized manner? Personally, my OCD with clean code definitely got much better when I implemented this to solve one of very complex business use-cases at work!</p>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
      </categories>
      
      
        <tags>
            
            <tag> #java </tag>
            
            <tag> #spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Upskilling at a time of COVID-19 lockdown</title>
      <link href="/blog/upskilling-at-a-time-of-covid-19-lockdown/"/>
      <url>/blog/upskilling-at-a-time-of-covid-19-lockdown/</url>
      
        <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>We are going through unprecedented times. On an everyday basis, I am seeing my juniors revealing the news of their revoked job/internship offers, despite their calibre, despite their skills, despite being from the best of colleges. This situation might impact many more people, but the first brunt of the crisis has to be borne by fresh graduates, <em>raison d’être</em> their lack of industry experience.</p><p>Despite the scenario, something that is definitely in our hands is to upskill ourselves by learning the skills that we would have learned being on a job! This article is an attempt to help and guide fresh graduates to learn some very basic skills required to work well in tech companies — the exposure that we don’t usually get in college.</p><p>So here you go!</p><h2 id="Tools"><a href="#Tools" class="headerlink" title="Tools"></a>Tools</h2><h3 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h3><div style="clear: both;">  <div style="float: left; margin-right: 1em;">    <img src="git.png" width="100"/>  </div>      <div>    The importance of this skill cannot be emphasized enough. Just like you can’t read without knowing the alphabet, you can’t code without knowing the efficient use of this version control system. <em>(Okay, this might be an exaggeration, but you get the point!)</em>  </div></div><p>In companies, you work in a team and teams write code together. You need to know how branching works, how merging code from various team members works, what resolving merge conflicts mean. These features provided by <a href="https://git-scm.com/">Git</a> are meant to make the processes efficient, and if you are not well-versed with this skill, it can rob you off of some precious time which could have gone into designing another important feature (or your coffee break maybe).</p><h3 id="Java-—-not-just-OOPS-but-actual-industry-level-Java"><a href="#Java-—-not-just-OOPS-but-actual-industry-level-Java" class="headerlink" title="Java — not just OOPS, but actual industry level Java"></a>Java — not just OOPS, but actual industry level Java</h3><div style="clear: both;">  <div style="float: left; margin-right: 1em;">    <img src="java.png" width="100"/>  </div>      <div>    Well, this is if your job profile works around Java. The Java that most of us are familiar with comprises basic OOPS level concepts — which is just the bare minimum that’s required to enter the world of Java. So, if you are not clear with OOPS concepts, please stop reading further, revise/learn them, and then continue reading this article further.  </div></div><p>Java has advanced multiple folds and there are so many features that you can learn. For starters, you can explore the <a href="https://www.journaldev.com/2389/java-8-features-with-examples">Java 8 features</a>. Simply knowing them is not sufficient, applying them is an art as well. The beauty of these new features is you can minimise the number of lines of code by leaps and bounds.</p><p><code>Do you know why 128 == 128 is true, but 127 == 127 is false, while using Integer wrapper in Java?</code></p><p><em>(Hint: explore the Integer class and its implementation!)</em></p><h3 id="Unit-Tests"><a href="#Unit-Tests" class="headerlink" title="Unit Tests"></a>Unit Tests</h3><p>I’m sure you had a boring software development course in college, which taught you the theory about unit testing, integration testing, regression testing and what not! Well if you are a developer, you are less likely to worry about the majority of the testing part, but unit tests are something that you may have to deal with on a daily basis. Learning the basics of some frameworks like <a href="https://junit.org/junit4/">JUnit</a> and <a href="https://site.mockito.org/">Mockito</a> will come in handy!</p><h3 id="SOLID-Design-Principles"><a href="#SOLID-Design-Principles" class="headerlink" title="SOLID Design Principles"></a>SOLID Design Principles</h3><div style="clear: both;">  <div style="float: left; margin-right: 1em;">    <img src="solid.png" width="100"/>  </div>      <div>    Now, this is again something you haven’t heard enough in college, but as soon as you start working as a developer, these principles are your holy grail! When applied properly it makes your code more extendable, logical, and easier to read. A bad design can make the code inflexible and more brittle. Small changes in the software can result in bugs.  </div></div><p>Now that we are talking about SOLID principles, it makes sense to explore various frameworks. You can explore <a href="https://spring.io/">Spring</a>, which is a very powerful Java framework that has simplified Java EE development and made developers more productive.</p><p>The team you may join might not be using all features of Spring, maybe it’s using <a href="https://github.com/google/guice">Google Guice</a> as an IOC, <a href="https://jersey.github.io/">Jersey</a> for REST services and <a href="https://cayenne.apache.org/">Apache Cayenne</a> as an ORM. But this is something very specific which you can easily catch-up to, after having a piece of basic knowledge.</p><h3 id="Deployment"><a href="#Deployment" class="headerlink" title="Deployment"></a>Deployment</h3><div style="clear: both;">  <div style="float: left; margin-right: 1em;">    <img src="tomcat.png" width="100"/>  </div>      <div>    Ok, you’ve built your application. You’ve really brainstormed your way through the best design principles you could. You’ve tested it thoroughly. Now, how do you deploy it? Read up on it!  </div></div><p><em>Tip:</em> <a href="https://tomcat.apache.org/">Apache Tomcat</a> is something which is one of the most popular servlet containers available, it has been used to power a wide range of applications and websites across the Internet. You can learn about how Tomcat enables quick load and redeploy times.</p><h3 id="Basic-Unix-commands"><a href="#Basic-Unix-commands" class="headerlink" title="Basic Unix commands"></a>Basic Unix commands</h3><p><a href="http://mally.stanford.edu/~sr/computing/basic-unix.html">Unix commands</a> are something you cannot escape. You will need them at some point, even if you are a holy Windows programmer. And, they aren’t so hard to learn after all.</p><p>You can go through <a href="https://www.thegeekstuff.com/2010/11/50-linux-commands/">this</a> link as starters and explore further!</p><h3 id="Basic-knowledge-of-HTML-CSS-and-JavaScript"><a href="#Basic-knowledge-of-HTML-CSS-and-JavaScript" class="headerlink" title="Basic knowledge of HTML, CSS and JavaScript"></a>Basic knowledge of HTML, CSS and JavaScript</h3><p>Well, whether you are in Front End Development or not, you might end up in a team that is into Front End Development. With the numerous <a href="https://hackernoon.com/how-it-feels-to-learn-javascript-in-2016-d3a717dd577f">libraries and frameworks</a> available, it is very hard to pinpoint the exact things you need to know for being a great web developer.</p><p>If you are really interested, you can start going through the technologies mentioned <a href="https://hackernoon.com/how-it-feels-to-learn-javascript-in-2016-d3a717dd577f">here</a>. Otherwise, a basic knowledge of HTML, CSS, and JavaScript can come in really handy.</p><h2 id="Final-words"><a href="#Final-words" class="headerlink" title="Final words"></a>Final words</h2><p>It goes unsaid that practice and implementation are the keys to learning and retaining. I hope the skills mentioned above help you upskill, and the lack of industry experience does not hamper your bright future!</p>]]></content>
      
      
      <categories>
          
          <category> Skills </category>
          
      </categories>
      
      
        <tags>
            
            <tag> #git </tag>
            
            <tag> #java </tag>
            
            <tag> #unit_testing </tag>
            
            <tag> #solid_design_principles </tag>
            
            <tag> #apache_tomcat </tag>
            
            <tag> #deployment </tag>
            
            <tag> #unix_commands </tag>
            
            <tag> #html </tag>
            
            <tag> #css </tag>
            
            <tag> #javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sliding Window Algorithm explained</title>
      <link href="/blog/sliding-window-algorithm-explained/"/>
      <url>/blog/sliding-window-algorithm-explained/</url>
      
        <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><div style="clear: both;">  <div style="float: left; margin-right: 1em;">    <img src="image.gif" width="250"/>  </div>  <div>    In this blog, I am going to consolidate all the problems related to Sliding Window Algorithm which I have come across, from beginner level to advanced level. These are some notes which I found from my placement days, I hope they will help in advancing your knowledge from a basic to an advanced level. For an introductory article on this algorithm, you can go through <a href="https://www.geeksforgeeks.org/window-sliding-technique/">this</a>.  </div></div><h2 id="Longest-Substring-Without-Repeating-Characters"><a href="#Longest-Substring-Without-Repeating-Characters" class="headerlink" title="Longest Substring Without Repeating Characters"></a>Longest Substring Without Repeating Characters</h2><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><p>Given a string, find the length of the longest substring without repeating characters.</p><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><p>Input: “abcabcbb”<br>Output: 3<br>Explanation: The answer is “abc”, with the length of 3.</p><h3 id="Approach"><a href="#Approach" class="headerlink" title="Approach"></a>Approach</h3><p>Use HashSet to store the characters in the current window [i, j). Then we slide the index j to the right. If it is not in the HashSet, we slide j further. Doing so until s[j] is already in the HashSet. At this point, we found the maximum size of substrings without duplicate characters start with index i. If we do this for all i, we get our answer.</p><h3 id="Dry-Run"><a href="#Dry-Run" class="headerlink" title="Dry Run"></a>Dry Run</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">abcabcbb</span><br><span class="line">i</span><br><span class="line">j </span><br><span class="line">set = [a], ans = max(0, 0-0+1) = 1</span><br><span class="line">abcabcbb</span><br><span class="line">ij </span><br><span class="line">set = [a, b], ans = max(1, 1-0+1) = 2</span><br><span class="line">abcabcbb</span><br><span class="line">i j </span><br><span class="line">set = [a, b, c], ans = max(2, 2-0+1) = 3</span><br><span class="line">abcabcbb</span><br><span class="line">i  j </span><br><span class="line">repeating character found at j, so i++ and remove char at i from set</span><br><span class="line">set = [b, c]</span><br><span class="line">abcabcbb</span><br><span class="line"> i j </span><br><span class="line">set = [b, c, a], ans = max(3, 3-1+1) = 3</span><br><span class="line">abcabcbb</span><br><span class="line"> i  j </span><br><span class="line">repeating character found at j, so i++ and remove char at i from set</span><br><span class="line">set = [c, a]</span><br><span class="line">abcabcbb</span><br><span class="line">  i j </span><br><span class="line">set = [c, a, b], ans = max(3, 4-2+1) = 3</span><br><span class="line">abcabcbb</span><br><span class="line">  i  j</span><br><span class="line">repeating character found at j, so i++ and remove char at i from set</span><br><span class="line">set = [a, b]</span><br><span class="line">abcabcbb</span><br><span class="line">   i j </span><br><span class="line">set = [a, b, c], ans = max(3, 5-3+1) = 3</span><br><span class="line">abcabcbb</span><br><span class="line">   i  j </span><br><span class="line">repeating character found at j, so i++ and remove char at i from set</span><br><span class="line">set = [b, c]</span><br><span class="line">abcabcbb</span><br><span class="line">     ij</span><br><span class="line">repeating character found at j, so i++ and remove char at i from set</span><br><span class="line">set = [c]</span><br><span class="line">abcabcbb</span><br><span class="line">     ij</span><br><span class="line">set = [c, b], ans = max(3, 6-5+1) = 3</span><br><span class="line">abcabcbb</span><br><span class="line">     i j</span><br><span class="line">repeating character found at j, so i++ and remove char at i from set</span><br><span class="line">set = [b]</span><br><span class="line">abcabcbb</span><br><span class="line">      ij</span><br><span class="line">repeating character found at j, so i++ and remove char at i from set</span><br><span class="line">set = []</span><br></pre></td></tr></table></figure><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lengthOfLongestSubString</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> n = s.length();</span><br><span class="line">  Set&lt;Character&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">  <span class="keyword">int</span> ans = <span class="number">0</span>, i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> (i &lt; n &amp;&amp; j &lt; n) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!set.contains(s.charAt(j))) &#123;</span><br><span class="line">      set.add(s.charAt(j));</span><br><span class="line">      j++;</span><br><span class="line">      ans = Math.max(ans, j - i);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      set.remove(s.charAt(i));</span><br><span class="line">      i++;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Longest-Substring-with-At-Most-Two-Distinct-Characters"><a href="#Longest-Substring-with-At-Most-Two-Distinct-Characters" class="headerlink" title="Longest Substring with At Most Two Distinct Characters"></a>Longest Substring with At Most Two Distinct Characters</h2><h3 id="Problem-1"><a href="#Problem-1" class="headerlink" title="Problem"></a>Problem</h3><p>Given a string S, find the length of the longest substring T that contains at most two distinct characters.</p><h3 id="Example-1"><a href="#Example-1" class="headerlink" title="Example"></a>Example</h3><p>Input: “aabcd”<br>Output: 3<br>Explanation: The answer is “aab”, with the length of 3.</p><h3 id="Approach-1"><a href="#Approach-1" class="headerlink" title="Approach"></a>Approach</h3><p>We use a sliding window that always satisfies the condition where there are always at most two distinct characters in it. When we add a new character that breaks this condition, we move the starting pointer of our string.</p><h3 id="Dry-Run-1"><a href="#Dry-Run-1" class="headerlink" title="Dry Run"></a>Dry Run</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">aabcd</span><br><span class="line">i</span><br><span class="line">j</span><br><span class="line">k = 0 (character &#x27;a&#x27;)</span><br><span class="line">ans = max(0, 0-0+1) = 1</span><br><span class="line">aabcd</span><br><span class="line">ij</span><br><span class="line">k = 1 (characte &#x27;a&#x27;)</span><br><span class="line">ans = max(1, 1-0+1) = 2</span><br><span class="line">aabcd</span><br><span class="line">i j</span><br><span class="line">k = 2 (character &#x27;b&#x27;)</span><br><span class="line">ans = max(2, 2-0+1) = 3</span><br><span class="line">aabcd</span><br><span class="line">i  j</span><br><span class="line">more than two distict characters found, i++</span><br><span class="line">aabcd</span><br><span class="line"> i j</span><br><span class="line">more than two distict characters found, i++</span><br><span class="line">aabcd</span><br><span class="line">  ij</span><br><span class="line">ans = max(3, 3-2+1) = 3</span><br><span class="line">aabcd</span><br><span class="line">  i j</span><br><span class="line">more than two distict characters found, i++</span><br><span class="line">aabcd</span><br><span class="line">   ij</span><br><span class="line">ans = max(3, 4-3+1) = 3</span><br></pre></td></tr></table></figure><h3 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lengthOfLongestSubStringTwoDistinct</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = s.length();</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>, j = -<span class="number">1</span>, ans = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt; s.length(); k++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (s.charAt(k) == s.charAt(k - <span class="number">1</span>)) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (j &gt;= <span class="number">0</span> &amp;&amp; s.charAt(j) != s.charAt(k)) &#123;</span><br><span class="line">            ans = Math.max(ans, k - i);</span><br><span class="line">            i = j + <span class="number">1</span>;</span><br><span class="line">            j = k - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Math.max(ans, n - i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Longest-Substring-with-At-Most-K-Distinct-Characters"><a href="#Longest-Substring-with-At-Most-K-Distinct-Characters" class="headerlink" title="Longest Substring with At Most K Distinct Characters"></a>Longest Substring with At Most K Distinct Characters</h2><h3 id="Problem-2"><a href="#Problem-2" class="headerlink" title="Problem"></a>Problem</h3><p>An extension to the previous problem, but instead of 2 now you need to have k distinct characters in the substring.</p><h3 id="Example-2"><a href="#Example-2" class="headerlink" title="Example"></a>Example</h3><p>Input: s = “eceba”, k = 2<br>Output: 3<br>Explanation: The answer is “ece”, with the length of 3.</p><h3 id="Approach-2"><a href="#Approach-2" class="headerlink" title="Approach"></a>Approach</h3><p>This is similar to solving the previous problem with at most 2 distinct characters, but the only difference now is that we need to track the number of distinct characters as well, for which we use the help of a map.</p><h3 id="Code-2"><a href="#Code-2" class="headerlink" title="Code"></a>Code</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lengthOfLongestSubStringKDistinct</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = s.length();</span><br><span class="line">    <span class="keyword">int</span>[] count = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">256</span>];</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>, numDistinct = <span class="number">0</span>, ans = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; s.length(); j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (count[s.charAt(j)] == <span class="number">0</span>) &#123;</span><br><span class="line">            numDistinct++;</span><br><span class="line">        &#125;</span><br><span class="line">        count[s.charAt(j)]++;</span><br><span class="line">        <span class="keyword">while</span> (numDistinct &gt; <span class="number">2</span>) &#123;</span><br><span class="line">            count[s.charAt(i)]--;</span><br><span class="line">            <span class="keyword">if</span> (count[s.charAt(i)] == <span class="number">0</span>) &#123;</span><br><span class="line">                numDistinct--;</span><br><span class="line">            &#125;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        ans = Math.max(ans, j - i + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Longest-Substring-with-exact-K-distinct-Characters"><a href="#Longest-Substring-with-exact-K-distinct-Characters" class="headerlink" title="Longest Substring with exact K distinct Characters"></a>Longest Substring with exact K distinct Characters</h2><h3 id="Problem-3"><a href="#Problem-3" class="headerlink" title="Problem"></a>Problem</h3><p>Given an array A of positive integers, find the number of subarrays with exactly K number of distinct characters.</p><h3 id="Example-3"><a href="#Example-3" class="headerlink" title="Example"></a>Example</h3><p>Input: A = [1,2,1,2,3], K = 2<br>Output: 7<br>Explanation: Subarrays formed with exactly 2 different integers: [1,2], [2,1], [1,2], [2,3], [1,2,1], [2,1,2], [1,2,1,2].</p><h3 id="Approach-1-Smart-Work"><a href="#Approach-1-Smart-Work" class="headerlink" title="Approach 1 (Smart Work)"></a>Approach 1 (Smart Work)</h3><p>If we are aware of how to find subarrays with “at most k different characters”, then we can extend the above algorithm to find the number of subarrays with “exactly k different characters” using the equation: <code>exactly(K) = atMost(K) — atMost(K-1)</code></p><h3 id="Code-for-Approach-1"><a href="#Code-for-Approach-1" class="headerlink" title="Code for Approach 1"></a>Code for Approach 1</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lengthOfLongestSubStringAtMostKDistinct</span><span class="params">(String s, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> n = s.length();</span><br><span class="line">  <span class="keyword">int</span>[] count = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">256</span>];</span><br><span class="line">  <span class="keyword">int</span> i = <span class="number">0</span>, numDistinct = <span class="number">0</span>, ans = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; s.length(); j++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (count[s.charAt(j)] == <span class="number">0</span>) &#123;</span><br><span class="line">      numDistinct++;</span><br><span class="line">    &#125;</span><br><span class="line">    count[s.charAt(j)]++;</span><br><span class="line">    <span class="keyword">while</span> (numDistinct &gt; k) &#123;</span><br><span class="line">      count[s.charAt(i)]--;</span><br><span class="line">      <span class="keyword">if</span> (count[s.charAt(i)] == <span class="number">0</span>) &#123;</span><br><span class="line">        numDistinct--;</span><br><span class="line">      &#125;</span><br><span class="line">      i++;</span><br><span class="line">    &#125;</span><br><span class="line">    ans = Math.max(ans, j - i + <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lengthOfLongestSubStringKDistinctIntegers</span><span class="params">(String s, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> lengthOfLongestSubStringAtMostKDistinct(s, k)</span><br><span class="line">      - lengthOfLongestSubStringAtMostKDistinct(s, k - <span class="number">1</span>);</span><br></pre></td></tr></table></figure><h3 id="Approach-2-Hard-Work"><a href="#Approach-2-Hard-Work" class="headerlink" title="Approach 2 (Hard Work)"></a>Approach 2 (Hard Work)</h3><p><a href="https://leetcode.com/problems/subarrays-with-k-different-integers/discuss/235235/C%2B%2BJava-with-picture-prefixed-sliding-window">Visit this link to learn more about this approach.</a>   </p>]]></content>
      
      
      <categories>
          
          <category> Algorithms </category>
          
      </categories>
      
      
        <tags>
            
            <tag> #sliding_window </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Interaction of Children with an Augmented Reality Smartphone App</title>
      <link href="/blog/interaction-of-children-with-an-augmented-reality-smartphone-app/"/>
      <url>/blog/interaction-of-children-with-an-augmented-reality-smartphone-app/</url>
      
        <content type="html"><![CDATA[<h2 id="Link-to-Research-Paper"><a href="#Link-to-Research-Paper" class="headerlink" title="Link to Research Paper"></a>Link to Research Paper</h2><p><a href="https://link.springer.com/article/10.1007/s41870-020-00460-6">Interaction of Children with an Augmented Reality Smartphone App</a></p><h2 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h2><p>Many children now get access to smartphones by two years of age and gradually learn to operate them. The objective of this study was to determine the age at which children become capable of using smartphone apps with augmented reality. We developed an augmented reality smartphone app in C# and studied the interaction of 60 children aged between two and eight years with it. We conducted a preference test to determine the interest of the children in using the app and a proficiency test to determine the ability of the children to use the app. We observed that 5% children aged two and three years, 25% children aged four to six years, and 55% children aged seven and eight years were interested in playing with the app. The children below the age of seven years were overwhelmed by the interplay of real and virtual objects displayed on the screen, and did not prefer playing with the app. Alternatively, the seven and eight year old children were able to use the app and were enthusiastic about it. However, the seven and eight year old children required 39.78% more time to use the app when compared with a similar app without aug- mented reality. We concluded that children develop skills necessary to use augmented reality software by the age of seven years. We recommend that augmented reality be used in educational apps for children aged seven years and more to enhance their learning experience.</p><p><img src="/blog/interaction-of-children-with-an-augmented-reality-smartphone-app/image.png"></p>]]></content>
      
      
      <categories>
          
          <category> Research Papers </category>
          
      </categories>
      
      
        <tags>
            
            <tag> #augmented_reality </tag>
            
            <tag> #android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Simulation of Steering a Self-Driving Car Using 1) PID Controller 2) Neural Network</title>
      <link href="/blog/simulation-of-steering-a-self-driving-car-using-pid-controller-and-neural-network/"/>
      <url>/blog/simulation-of-steering-a-self-driving-car-using-pid-controller-and-neural-network/</url>
      
        <content type="html"><![CDATA[<h2 id="Link-to-Research-Paper"><a href="#Link-to-Research-Paper" class="headerlink" title="Link to Research Paper"></a>Link to Research Paper</h2><p><a href="https://ieeexplore.ieee.org/document/8987865">Simulation of Steering a Self-Driving Car Using 1) PID Controller 2) Neural Network</a></p><h2 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h2><p>Over the last few years, self-driving vehicles have expanded dramatically. They look promising in decreasing traffic accidents and congestion on roads. In order for this approach to work, simulations tend to be a cheaper, more efficient, and a safer way than live testing. In this paper, we present a simulator that tests the self-driving car’s CNN model in a virtual environment. To avoid the hassle of collecting huge amount of training and testing data for preliminary testing, we also propose a method to collect data (images, steering value and throttle value) using PID controllers in the virtual environment itself.</p><p><img src="/blog/simulation-of-steering-a-self-driving-car-using-pid-controller-and-neural-network/image.jpeg"></p>]]></content>
      
      
      <categories>
          
          <category> Research Papers </category>
          
      </categories>
      
      
        <tags>
            
            <tag> #android </tag>
            
            <tag> #machine_learning </tag>
            
            <tag> #virtual_reality </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Enhancing the Learning Experience with Pop-Up Feature in Flying Dictionary Android Application</title>
      <link href="/blog/enhancing-the-learning-experience-with-pop-up-feature-in-flying-dictionary-android-application/"/>
      <url>/blog/enhancing-the-learning-experience-with-pop-up-feature-in-flying-dictionary-android-application/</url>
      
        <content type="html"><![CDATA[<h2 id="Link-to-Research-Paper"><a href="#Link-to-Research-Paper" class="headerlink" title="Link to Research Paper"></a>Link to Research Paper</h2><p><a href="https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9007254">Enhancing the Learning Experience with Pop-Up Feature in Flying Dictionary Android Application</a></p><h2 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h2><p>We develop an Android application “Flying Dictionary” which is an offline pop-up dictionary meant to ease users by displaying the meaning of the words they find tough without having to switch to some other app in order to look for its meaning. The application was created and uploaded on Play Store in March 2017, and since then over 5000 users have installed it on their Android devices. With a current rating of 4.8 (as of May 2018), our aim is to make it easier for otherwise reluctant students to encourage learning new words with ease and at the click of a button. This paper analyses the impact of using the application for daily look-up of meanings, on users’ learning experience. The analysis indicates that providing the users with the ability to glance the meanings on the go helps them in learning more new words and prevents them from giving excuses like the need for an online connection or the need for switching the app in order to look for the meaning. This contributes to the growing importance of the pop-up feature and emphasizes the need to incorporate this in the popular dictionary apps as well as try and bring up the feature as a built-in utility in the Android OS itself.</p><div style="display: flex; justify-content: center;">    <div style="margin-right: 5px;"><img id ="ttl" src="image1.jpg"></div>    <div style="margin-left: 5px;"><img id ="se" src="image2.jpg"></div></div><h2 id="App-Demo"><a href="#App-Demo" class="headerlink" title="App Demo"></a>App Demo</h2><p><a href="https://www.youtube.com/watch?v=YR0EqhVdUSc&t=3s&pp=sAQA"><img src="thumbnail.png" width="450"/></a></p>]]></content>
      
      
      <categories>
          
          <category> Research Papers </category>
          
      </categories>
      
      
        <tags>
            
            <tag> #android </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
