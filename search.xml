<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Writing Mockable Code in Go</title>
      <link href="/blog/writing-mockable-code-in-go/"/>
      <url>/blog/writing-mockable-code-in-go/</url>
      
        <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>Experienced engineers will agree how important writing tests is, and most of the time even prevent a Pull Request from going through when the appropriate tests are not added/modified.</p><p>With tests being so important, we need to understand how to write testable/mockable code. If you are new to mocking, you can read the basics first, <a href="https://grails.org/blog/2018-06-22.html">this</a> is a good reference blog to start with. </p><p>Let’s identify the testing best practices in the next section, with the help of a microservice that exposes a single endpoint <code>/coffee</code> and returns a coffee type.</p><h2 id="Tasting-read-Testing-Coffee"><a href="#Tasting-read-Testing-Coffee" class="headerlink" title="Tasting (read: Testing) Coffee"></a>Tasting (read: Testing) Coffee</h2><h3 id="Code-Walkthrough"><a href="#Code-Walkthrough" class="headerlink" title="Code Walkthrough"></a>Code Walkthrough</h3><p>We have a <code>main.go</code> file from where the code flow begins:</p><figure class="highlight golang"><figcaption><span>main.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/deeheem/goland-unit-test/code/controllers&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">router = gin.Default()</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">router.GET(<span class="string">&quot;/coffee&quot;</span>, controllers.GetCoffee)</span><br><span class="line">router.Run(<span class="string">&quot;:8080&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The <code>GetCoffee()</code> function in <code>coffee_controller.go</code> interacts with the appropriate service:</p><figure class="highlight golang"><figcaption><span>coffee_controller.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> controllers</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;net/http&quot;</span></span><br><span class="line">    <span class="string">&quot;github.com/deeheem/goland-unit-test/code/services&quot;</span></span><br><span class="line">    <span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line"> )</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetCoffee</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">result, err := services.HandleCoffee()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">c.String(http.StatusInternalServerError, err.Error())</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">c.String(http.StatusOK, result)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The <code>HandleCoffee()</code> function in <code>coffee_service.go</code> handles the main logic:</p><figure class="highlight golang"><figcaption><span>coffee_service.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> services</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">coffee = <span class="string">&quot;Cappuccino&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">HandleCoffee</span><span class="params">()</span> <span class="params">(<span class="keyword">string</span>, error)</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;doing complex things here...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span> coffee, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now run the application using <code>go run main.go</code> and call the API using <code>curl localhost:8080/coffee</code> or <code>curl localhost:8080/coffee -v</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">~/Projects/GoProjects/golang-unit-test » curl localhost:8080/coffee       </span><br><span class="line">Cappuccino% </span><br><span class="line"></span><br><span class="line">~/Projects/GoProjects/golang-unit-test » curl localhost:8080/coffee -v</span><br><span class="line">*   Trying ::1...</span><br><span class="line">* TCP_NODELAY <span class="built_in">set</span></span><br><span class="line">* Connected to localhost (::1) port 8080 (<span class="comment">#0)</span></span><br><span class="line">&gt; GET /coffee HTTP/1.1</span><br><span class="line">&gt; Host: localhost:8080</span><br><span class="line">&gt; User-Agent: curl/7.64.1</span><br><span class="line">&gt; Accept: */*</span><br><span class="line">&gt; </span><br><span class="line">&lt; HTTP/1.1 200 OK</span><br><span class="line">&lt; Content-Type: text/plain; charset=utf-8</span><br><span class="line">&lt; Date: Sun, 19 Sep 2021 14:49:59 GMT</span><br><span class="line">&lt; Content-Length: 4</span><br><span class="line">&lt; </span><br><span class="line">* Connection <span class="comment">#0 to host localhost left intact</span></span><br><span class="line">Cappuccino* Closing connection 0</span><br></pre></td></tr></table></figure><h3 id="Basic-Test"><a href="#Basic-Test" class="headerlink" title="Basic Test"></a>Basic Test</h3><p>Let’s write a basic test to verify the error code and the result:</p><figure class="highlight golang"><figcaption><span>coffee_controller_test.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> controllers</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line"><span class="string">&quot;net/http/httptest&quot;</span></span><br><span class="line"><span class="string">&quot;testing&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestCoffee</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">response := httptest.NewRecorder()</span><br><span class="line">context, _ := gin.CreateTestContext(response)</span><br><span class="line"></span><br><span class="line">GetCoffee(context)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> response.Code != http.StatusOK &#123;</span><br><span class="line">t.Error(<span class="string">&quot;response should be 200&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> response.Body.String() != <span class="string">&quot;Cappuccino&quot;</span> &#123;</span><br><span class="line">t.Error(<span class="string">&quot;response should say &#x27;Cappuccino&#x27;&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Let’s run the test with coverage:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">~/Projects/GoProjects/golang-unit-test/code/controllers(master*) » go test . -v -cover</span><br><span class="line">=== RUN   TestCoffee</span><br><span class="line">[GIN-debug] [WARNING] Running in &quot;debug&quot; mode. Switch to &quot;release&quot; mode in production.</span><br><span class="line"> - using env:   export GIN_MODE=release</span><br><span class="line"> - using code:  gin.SetMode(gin.ReleaseMode)</span><br><span class="line"></span><br><span class="line">doing complex things here...</span><br><span class="line">--- PASS: TestCoffee (0.00s)</span><br><span class="line">PASS</span><br><span class="line">coverage: 75.0% of statements</span><br><span class="line">ok      github.com/deeheem/goland-unit-test/code/controllers    0.645s  coverage: 75.0% of statements</span><br></pre></td></tr></table></figure><p>We see that as expected, our test does pass. But only 75% of the lines were covered. This is because our test doesn’t cover the error scenario, and the following lines from <code>coffee_service.go</code> are not evaluated:</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">c.String(http.StatusInternalServerError, err.Error())</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We want to develop a test case that tests this scenario as well. In order to do that we need to have complete and full control over what this <code>HandleCoffee()</code> function returns. Because Go is a compiled language, you cannot mock what this function actually does once this code is compiled.</p><p>So, the first thing that we need to keep in mind when writing mockable code is that if we put a package function, we are not going to be able to mock this function. So we need to make sure that we always use interfaces where we want to mock.</p><p>Before adding an interface though, let’s add a struct in the next section.</p><h3 id="Adding-struct"><a href="#Adding-struct" class="headerlink" title="Adding struct"></a>Adding struct</h3><p>We add a struct called <code>coffeeService</code> and bind the function <code>HandleCoffee()</code> to this service, making it a method.</p><figure class="highlight golang"><figcaption><span>coffee_service.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> services</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> coffeeService <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">coffee = <span class="string">&quot;Cappuccino&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">CoffeeService = coffeeService&#123;&#125; <span class="comment">// public variable to access the service</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(service coffeeService)</span> <span class="title">HandleCoffee</span><span class="params">()</span> <span class="params">(<span class="keyword">string</span>, error)</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;doing complex things here...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span> coffee, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Note that we have added a public variable <code>CoffeeService</code> so that other packages (like controllers) can use it to access the service.</p><h3 id="Adding-interface"><a href="#Adding-interface" class="headerlink" title="Adding interface"></a>Adding interface</h3><p>Next we add the interface <code>coffeeService</code> and rename our struct to <code>coffeeServiceImpl</code>, indicating that this struct now implements the interface.</p><figure class="highlight golang"><figcaption><span>coffee_service.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> services</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> coffeeService <span class="keyword">interface</span> &#123;</span><br><span class="line">HandleCoffee() (<span class="keyword">string</span>, error)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> coffeeServiceImpl <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">coffee = <span class="string">&quot;Cappuccino&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">CoffeeService = coffeeServiceImpl&#123;&#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(service coffeeServiceImpl)</span> <span class="title">HandleCoffee</span><span class="params">()</span> <span class="params">(<span class="keyword">string</span>, error)</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;doing complex things here...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span> coffee, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Modifying-the-test"><a href="#Modifying-the-test" class="headerlink" title="Modifying the test"></a>Modifying the test</h3><p>Now we modify our test as shown below:</p><figure class="highlight golang"><figcaption><span>coffee_controller_test.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> controllers</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line"><span class="string">&quot;net/http/httptest&quot;</span></span><br><span class="line"><span class="string">&quot;testing&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/deeheem/goland-unit-test/code/services&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> coffeeServiceMock <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(mock coffeeServiceMock)</span> <span class="title">HandleCoffee</span><span class="params">()</span> <span class="params">(<span class="keyword">string</span>, error)</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;mocking complex things...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;Cappuccino&quot;</span>, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestCoffee</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">    services.CoffeeService = coffeeServiceMock&#123;&#125; <span class="comment">// overriding actual service</span></span><br><span class="line">    </span><br><span class="line">    response := httptest.NewRecorder()</span><br><span class="line">    context, _ := gin.CreateTestContext(response)</span><br><span class="line"></span><br><span class="line">    GetCoffee(context)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> response.Code != http.StatusOK &#123;</span><br><span class="line">        t.Error(<span class="string">&quot;response should be 200&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> response.Body.String() != <span class="string">&quot;Cappuccino&quot;</span> &#123;</span><br><span class="line">        t.Error(<span class="string">&quot;response should say &#x27;Cappuccino&#x27;&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We are using the same interface we created in the service to create a mock. We provide a custom implementation of this mock in the test itself, and then override this mock implementation in the test case so it gets used during the test run (instead of the actual service implementation). </p><p>This can be verified when we see the line <code>mocking complex things...</code> being printed instead of <code>doing complex things here...</code> while running the test case. On commenting the line <code>services.CoffeeService = coffeeServiceMock&#123;&#125;</code> in the test, we will again see <code>doing complex things here...</code> being printed as the mock implementation will not be used anymore.</p><h3 id="Making-code-coverage-100"><a href="#Making-code-coverage-100" class="headerlink" title="Making code coverage 100%"></a>Making code coverage 100%</h3><p>If we run the test, our code coverage is still 75% due to the same reasons discussed earlier. Although, we now have extensible code where we can provide a custom implementation of the <code>HandleCoffee()</code> method in order to test the error scenario as well.</p><figure class="highlight golang"><figcaption><span>coffee_controller_test.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> controllers</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line"><span class="string">&quot;net/http/httptest&quot;</span></span><br><span class="line"><span class="string">&quot;testing&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/deeheem/goland-unit-test/code/services&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> coffeeServiceMock <span class="keyword">struct</span> &#123;</span><br><span class="line">    handleCoffeeFn <span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="params">(<span class="keyword">string</span>, error)</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(mock coffeeServiceMock)</span> <span class="title">HandleCoffee</span><span class="params">()</span> <span class="params">(<span class="keyword">string</span>, error)</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> mock.handleCoffeeFn()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestCoffeeNoError</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">    serviceMock := coffeeServiceMock&#123;&#125;</span><br><span class="line">    serviceMock.handleCoffeeFn = <span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="params">(<span class="keyword">string</span>, error)</span></span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Cappuccino&quot;</span>, <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    services.CoffeeService = serviceMock</span><br><span class="line">    </span><br><span class="line">    response := httptest.NewRecorder()</span><br><span class="line">    context, _ := gin.CreateTestContext(response)</span><br><span class="line">    </span><br><span class="line">    GetCoffee(context)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> response.Code != http.StatusOK &#123;</span><br><span class="line">        t.Error(<span class="string">&quot;response should be 200&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> response.Body.String() != <span class="string">&quot;Cappuccino&quot;</span> &#123;</span><br><span class="line">        t.Error(<span class="string">&quot;response should say &#x27;Cappuccino&#x27;&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestCoffeeWithError</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">    serviceMock := coffeeServiceMock&#123;&#125;</span><br><span class="line">    serviceMock.handleCoffeeFn = <span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="params">(<span class="keyword">string</span>, error)</span></span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>, errors.New(<span class="string">&quot;error getting coffee&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    services.CoffeeService = serviceMock</span><br><span class="line">    </span><br><span class="line">    response := httptest.NewRecorder()</span><br><span class="line">    context, _ := gin.CreateTestContext(response)</span><br><span class="line">    </span><br><span class="line">    GetCoffee(context)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> response.Code != http.StatusInternalServerError &#123;</span><br><span class="line">        t.Error(<span class="string">&quot;response should be 500&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> response.Body.String() != <span class="string">&quot;error getting coffee&quot;</span> &#123;</span><br><span class="line">        t.Error(<span class="string">&quot;response should say &#x27;error&#x27;&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We added an attribute <code>handleCoffeeFn</code> inside the custom implementation of the CoffeeService interface, i.e. <code>coffeeServiceMock</code>. This attribute helps us plugin different implementations of HandleCoffee() method as per test case requirements.</p><p>Now if we run the test with coverage, we get a 100% result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">~/Projects/GoProjects/golang-unit-test/code/controllers(master*) » go test . -v -cover</span><br><span class="line">=== RUN   TestCoffeeWithError</span><br><span class="line">[GIN-debug] [WARNING] Running in &quot;debug&quot; mode. Switch to &quot;release&quot; mode in production.</span><br><span class="line"> - using env:   export GIN_MODE=release</span><br><span class="line"> - using code:  gin.SetMode(gin.ReleaseMode)</span><br><span class="line"></span><br><span class="line">--- PASS: TestCoffeeWithError (0.00s)</span><br><span class="line">=== RUN   TestCoffeeNoError</span><br><span class="line">[GIN-debug] [WARNING] Running in &quot;debug&quot; mode. Switch to &quot;release&quot; mode in production.</span><br><span class="line"> - using env:   export GIN_MODE=release</span><br><span class="line"> - using code:  gin.SetMode(gin.ReleaseMode)</span><br><span class="line"></span><br><span class="line">--- PASS: TestCoffeeNoError (0.00s)</span><br><span class="line">PASS</span><br><span class="line">coverage: 100.0% of statements</span><br><span class="line">ok      github.com/deeheem/goland-unit-test/code/controllers    1.031s  coverage: 100.0% of statements</span><br></pre></td></tr></table></figure><h2 id="Learnings"><a href="#Learnings" class="headerlink" title="Learnings"></a>Learnings</h2><p>In order to write testable code in Go, we need to keep the following points in mind:</p><ol><li>Implement functions not as functions, but as methods, i.e. use structs</li><li>Define an interface that defines every method we need in the struct</li><li>Inside every test case, specify the behaviour you expect from the mocked object. This makes it easy for you to have control over what the function call actually returns.</li></ol><h2 id="Mocking-Frameworks"><a href="#Mocking-Frameworks" class="headerlink" title="Mocking Frameworks"></a>Mocking Frameworks</h2><p>Like every other programming language, Go also has various libraries and packages to help generate mocks and write tests.</p><p>But if you are new to testing, let’s first understand why there is a need for mocking frameworks in the first place.</p><h3 id="Need-for-Mocking-Frameworks"><a href="#Need-for-Mocking-Frameworks" class="headerlink" title="Need for Mocking Frameworks"></a>Need for Mocking Frameworks</h3><p>Say that you are testing your code that is still in development. In order to achieve the right results, you need to test its interactions with system resources, outside applications, and other dependencies. Unfortunately, you learn early on that that is not possible. Utilizing a mocking framework allows for realistic emulations of the required interactions.</p><p>Mocked objects take the place of any large/complex/external objects your code needs access to in order to run.</p><p>They are beneficial for a few reasons:</p><ol><li>Your tests are meant to run fast and easily. If your code depends on, say, a database connection then you would need to have a fully configured and populated database running in order to run your tests. This can get annoying, so you create a replacement - a “mock” - of the database connection object that just simulates the database.</li><li>You can control exactly what output comes out of the Mock objects and can therefore use them as controllable data sources for your tests.</li><li>You can create the mock before you create the real object in order to refine its interface. This is useful in Test-driven Development.</li></ol><h3 id="Mocking-Frameworks-in-Go"><a href="#Mocking-Frameworks-in-Go" class="headerlink" title="Mocking Frameworks in Go"></a>Mocking Frameworks in Go</h3><p>In a typical business application with a lot of code, writing mocks can easily increase the development time. Fortunately, the following tools come in very handy in Go for writing unit tests:</p><ul><li><a href="https://github.com/golang/mock">golang/mock</a></li><li><a href="https://github.com/stretchr/testify">testify/mock</a></li></ul><p><a href="https://github.com/vektra/mockery">mockery</a> is an awesome tool to easily generate mocks for golang interfaces. It uses the <a href="https://github.com/stretchr/testify">testify/mock</a> package internally.</p>]]></content>
      
      
      <categories>
          
          <category> Languages </category>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> #go </tag>
            
            <tag> #testing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OAuth for Dummies [Part 2] OAuth in Detail</title>
      <link href="/blog/oauth-explained/"/>
      <url>/blog/oauth-explained/</url>
      
        <content type="html"><![CDATA[<p><em><span class="github-emoji" alias="grey_exclamation" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2755.png?v8">&#x2755;</span> This is Part 2 of a two-part blog series on OAuth.</em><br><em>&nbsp;&nbsp;&nbsp;&nbsp;<a href="/blog/why-oauth/" title="Part 1: Why OAuth">Part 1: Why OAuth</a> focuses on the need for OAuth.</em><br><em>&nbsp;&nbsp;&nbsp;&nbsp;<a href="/blog/oauth-explained/" title="Part 2: OAuth in Detail">Part 2: OAuth in Detail</a> goes deep into the workings of OAuth.</em></p><h2 id="Protocol-Endpoints"><a href="#Protocol-Endpoints" class="headerlink" title="Protocol Endpoints"></a>Protocol Endpoints</h2><p>There are two types of endpoints in an Authorization Server:</p><ol><li>Authorization endpoints - They handle all user interaction via the user agent (browser).</li><li>Token endpoints - They are meant for machines only, for interacting away from the browser via a secure API call.</li></ol><p>Both these layers must use TLS.<br>The location of these endpoints must be known to the client applications before they can be used as the authorization server.</p><div style="width: 550px; margin: auto;">        <div>      <img src="/blog/oauth-explained/oauth-2-protocol-endpoints.jpg" alt="" data-action="zoom" class="photozoom">          </div></div><h2 id="OAuth-Scope"><a href="#OAuth-Scope" class="headerlink" title="OAuth Scope"></a>OAuth Scope</h2><p>OAuth Scope refers to the permission to do something from within a protected resource on behalf of the resource owner.</p><p>Examples of scopes:</p><ul><li>bitterbrew_api</li><li>bitterbrew_api.read</li><li>bitterbrew_api.feed</li></ul><h2 id="Authorization-Code-Grant-Type"><a href="#Authorization-Code-Grant-Type" class="headerlink" title="Authorization Code Grant Type"></a>Authorization Code Grant Type</h2><h3 id="Flow"><a href="#Flow" class="headerlink" title="Flow"></a>Flow</h3><p>The Authorization Code Grant Type is:</p><ul><li>designed for “confidential access”</li><li>best for websites with a server backend</li><li>explicit user &amp; client authentication</li></ul><p>Let’s take a look at how a typical Authorization Request would look like:</p><figure class="highlight plaintext"><figcaption><span>Authorization Request</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">https://authserver.example.com/authorize</span><br><span class="line">    ?response_type=code</span><br><span class="line">    &amp;client_id=s6Bhdjk3H</span><br><span class="line">    &amp;redirect_uri=https://client.example.com/callback</span><br><span class="line">    &amp;state=xyz</span><br><span class="line">    &amp;scope api1 api2.read</span><br></pre></td></tr></table></figure><ul><li><code>response_type=code</code> signals the Authorization Server to use the authorization code flow</li><li><code>client_id</code> is a unique ID for the client app</li><li><code>redirect_uri</code> is where the auth endpoint will redirect to once it has finished<br>interacting with the resource owner. This endpoint must have been previously<br>registered within the Authorization Server.</li><li><code>state</code>‘s value will be echoed back to us in the response. This offers us a couple of things:<ul><li>A way to round trip information</li><li>A simple way of verifying the response we receive is actually intended for us, giving us some basic defence against XSRF and unsolicited tokens.<br>The value should not be guessable. It is an optional parameter, but a recommended one.</li></ul></li><li><code>scope</code> gives the client app a way to explicitly specify what permissions they want, i.e. what they want to do on behalf of the user. It is a space-delimited string. If not included in the request, the authorization server will fall back to a default set of scopes. Could be a global default or default for this particular client application or application type.</li></ul><p>Once the resource owner authenticates and consents, the Authorization Server will then redirect to the client app’s redirect URI along with the following query params:</p><figure class="highlight plaintext"><figcaption><span>Authorization Response</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">https://client.example.com/callback</span><br><span class="line">    ?code=KHSjdesjd38dufhkjszhH</span><br><span class="line">    &amp;state=xyz</span><br></pre></td></tr></table></figure><ul><li><code>code</code> is the authorization code that is synonymous with the grant type, and represents that the user consents to the authorization (physical representation of the Authorization Grant)<ul><li>Has a very short lifetime</li><li>Is bound to client id, redirect URI, resource owner and the scopes the application has been delegated</li></ul></li><li><code>state</code> must match the value we used in the Authorization Request</li></ul><p>We now have the Authorization Code. Let’s move away from the browser and swap the code for an Access Token using the Authorization Server’s token endpoint.</p><p>The token request is made via a POST HTTP request to facilitate the transfer of confidential data using TLS.</p><figure class="highlight plaintext"><figcaption><span>Token Request</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">POST /token HTTP 1.1</span><br><span class="line">    Host: server.example.com</span><br><span class="line">    Content-Type: application/x-www-form-urlencoded</span><br><span class="line">    </span><br><span class="line">    grant_type=authorization_code</span><br><span class="line">    &amp;code=KHSjdesjd38dufhkjszhH</span><br><span class="line">    &amp;redirect_uri=https://client.example.com/cb</span><br><span class="line">    &amp;client_id=kKDJ38zdnksnja</span><br><span class="line">    &amp;client_secret=dskf8dshKJf</span><br></pre></td></tr></table></figure><p>Note that there’s a slight difference between the encoding style for Basic Authentication and OAuth:</p><p><strong>Basic Authentication Style (RFC 7617)</strong><br><code>Base64(client_id + &quot;:&quot; + client_secret)</code></p><p><strong>OAuth Style (RFC 6749)</strong><br><code>Base64(urlformencode(client_id) + &quot;:&quot; urlformencode(client_secret))</code></p><p>The token response received from the Authorization Server looks something like this:</p><figure class="highlight plaintext"><figcaption><span>Token Response</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">    Content-Type: application/json</span><br><span class="line">&#123;    </span><br><span class="line">    &quot;access_token&quot;: &quot;jshdas7JKAshDKYsd893&quot;,</span><br><span class="line">    &quot;token_type&quot;: &quot;Bearer&quot;,</span><br><span class="line">    &quot;expired_in&quot;: 3600,</span><br><span class="line">    &quot;scope&quot;: &quot;api2.read&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Token type and the access token are used to access the protected resource.</p><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><p>Let’s trigger a request for fetching the authorization code:</p>    <div>      <img src="/blog/oauth-explained/oauth-2-auth-code-1.jpg" alt="" data-action="zoom" class="photozoom">          </div><p>We are redirected to the Bitter Brew site, do note the request details below:</p>    <div>      <img src="/blog/oauth-explained/oauth-2-auth-code-2.png" alt="" data-action="zoom" class="photozoom">          </div><p>After authenticating, we are taken to the consent screen:</p>    <div>      <img src="/blog/oauth-explained/oauth-2-auth-code-3.jpg" alt="" data-action="zoom" class="photozoom">          </div><p>Accepting the permissions takes us back to the redirect URL:</p>    <div>      <img src="/blog/oauth-explained/oauth-2-auth-code-4.jpg" alt="" data-action="zoom" class="photozoom">          </div><p>We can see the code has been sent and the state matches the state we issued. We then swap the code with the token by calling the token endpoint:</p>    <div>      <img src="/blog/oauth-explained/oauth-2-auth-code-5.jpg" alt="" data-action="zoom" class="photozoom">          </div><p>Note the expiry of the token is in 1 hour’s time. Also note that we normally don’t expose the tokens on the browser in this way, instead keep them safe and secret using some mechanism driven by our backend server.</p><p>Finally using this token we call the rewards API on behalf of the user.</p>    <div>      <img src="/blog/oauth-explained/oauth-2-auth-code-6.jpg" alt="" data-action="zoom" class="photozoom">          </div><h2 id="The-Client-Credentials-Grant-Type"><a href="#The-Client-Credentials-Grant-Type" class="headerlink" title="The Client Credentials Grant Type"></a>The Client Credentials Grant Type</h2><p>What if there is no clear resource owner? What if we are dealing with a client application that has no users involved? Can we still protect an API using the OAuth Authorization Server? Or do we need to fall back to something like API Keys or even HTTP basic authentication?</p><p>This is where the Client Credentials Grant Type can be used.</p><p>Client Credentials Grant Type is:</p><ul><li>designed for client applications who are the resource owner</li><li>best for machine-to-machine communication</li><li>requires client authentication</li></ul><h3 id="Flow-1"><a href="#Flow-1" class="headerlink" title="Flow"></a>Flow</h3>    <div>      <img src="/blog/oauth-explained/oauth-2-cc-flow.jpg" alt="" data-action="zoom" class="photozoom">          </div><figure class="highlight plaintext"><figcaption><span>Token Request</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">POST /token HTTP 1.1</span><br><span class="line">    Host: server.example.com</span><br><span class="line">    Content-Type: application/x-www-form-urlencoded</span><br><span class="line">    Authorization: Basic skhf7Jbsdf3ofsdfdflkjn</span><br><span class="line">    </span><br><span class="line">    grant_type=client_credentials</span><br><span class="line">    &amp;scope=api1 api2.read</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><figcaption><span>Token Response</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">    Content-Type: application/json</span><br><span class="line">&#123;    </span><br><span class="line">    &quot;access_token&quot;: &quot;jshdas7JKAshDKYsd893&quot;,</span><br><span class="line">    &quot;token_type&quot;: &quot;Bearer&quot;,</span><br><span class="line">    &quot;expired_in&quot;: 3600,</span><br><span class="line">    &quot;scope&quot;: &quot;api2.read&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>For those paying attention, the benefits of OAuth over API keys or HTTP Basic Auth become a little less obvious in this case. However, we do have some advantages:</p><ol><li>Application credentials are not sent with every single request to the protected resource. Instead, they’re only sent on the token request. This significantly reduces the attack surface.</li><li>By using short-lived access tokens, we gain the ability to remove the credentials from the request.</li><li>It also reduces the amount of time any stolen tokens might be useful. (compared to an API key, which would probably live for months). It also does not require any manual intervention to update.</li></ol><h2 id="Long-lived-access-with-Refresh-Tokens"><a href="#Long-lived-access-with-Refresh-Tokens" class="headerlink" title="Long-lived access with Refresh Tokens"></a>Long-lived access with Refresh Tokens</h2><p>What happens when the tokens expire? This is where the Refresh Token comes into the picture. </p><p>A refresh token is:</p><ul><li>Long-lived token</li><li>Used by the client app and swapped for new access tokens</li><li>Allows performing long-running background tasks without the user being present / or to simply save the user from reauthorizing the application every half hour</li><li>Must be kept highly confidential – if it gets stolen, the thief can get access to the access token to access the APIs</li><li>User should be made aware that refresh tokens are being requested</li></ul><figure class="highlight plaintext"><figcaption><span>Authorization Request</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">https://authserver.example.com/authorize</span><br><span class="line">    ?response_type=code</span><br><span class="line">    &amp;client_id=s6Bhdjk3H</span><br><span class="line">    &amp;redirect_uri=https://client.example.com/callback</span><br><span class="line">    &amp;state=xyz</span><br><span class="line">    &amp;scope api1 api2.read offline_access</span><br></pre></td></tr></table></figure><p>Note that <code>offline_access</code> scope has been added in the request.</p><figure class="highlight plaintext"><figcaption><span>Token Response</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">    Content-Type: application/json</span><br><span class="line">&#123;    </span><br><span class="line">    &quot;access_token&quot;: &quot;jshdas7JKAshDKYsd893&quot;,</span><br><span class="line">    &quot;token_type&quot;: &quot;Bearer&quot;,</span><br><span class="line">    &quot;expired_in&quot;: 3600,</span><br><span class="line">    &quot;refresh_token&quot;: &quot;skfjhiw84jkezSKJ84&quot;</span><br><span class="line">    &quot;scope&quot;: &quot;api2.read&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now the swapping of refresh token with new access token can be triggered either when one unauthorized response is received, or based on the expiration time returned in the token response.</p><figure class="highlight plaintext"><figcaption><span>Refresh Token Request</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">POST /token HTTP 1.1</span><br><span class="line">    Host: server.example.com</span><br><span class="line">    Content-Type: application/x-www-form-urlencoded</span><br><span class="line">    Authorization: Basic skhf7Jbsdf3ofsdfdflkjn</span><br><span class="line">    </span><br><span class="line">    grant_type=refresh_token</span><br><span class="line">    &amp;scope=api1</span><br></pre></td></tr></table></figure><p>Note that the scope should only be included when requesting access to fewer scopes than what was initially delegated by the client application. Since the user is no longer present, it’s not possible to ask for more or different scopes than what we were originally delegated.</p><figure class="highlight plaintext"><figcaption><span>Refresh Token Response</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">    Content-Type: application/json</span><br><span class="line">&#123;    </span><br><span class="line">    &quot;access_token&quot;: &quot;jk6gcdHdjy76kljSDG&quot;,</span><br><span class="line">    &quot;token_type&quot;: &quot;Bearer&quot;,</span><br><span class="line">    &quot;expired_in&quot;: 3600,</span><br><span class="line">    &quot;refresh_token&quot;: &quot;oih897GSG34khjb9&quot;</span><br><span class="line">    &quot;scope&quot;: &quot;api2.read offline_access&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In the response, we receive the usual access token, and if requested, the refresh token too.</p><p>Refresh tokens could be reusable or for one-time use. They could have set expiry or sliding expiry based on usage. It is entirely up to the Authorization Server to decide the Refresh Token policy for the client application.</p><h3 id="Example-1"><a href="#Example-1" class="headerlink" title="Example"></a>Example</h3><p>Let’s start with our usual Authorization flow from where we land on to the Bitter Brew website:</p>    <div>      <img src="/blog/oauth-explained/oauth-2-refresh-token-1.jpg" alt="" data-action="zoom" class="photozoom">          </div><p>    <div>      <img src="/blog/oauth-explained/oauth-2-refresh-token-2.png" alt="" data-action="zoom" class="photozoom">          </div><p>Note the scope has an <code>offline_access</code> value as well.</p>    <div>      <img src="/blog/oauth-explained/oauth-2-refresh-token-3.jpg" alt="" data-action="zoom" class="photozoom">          </div><p>After allowing we get the refresh token in the response:</p>    <div>      <img src="/blog/oauth-explained/oauth-2-refresh-token-4.jpg" alt="" data-action="zoom" class="photozoom">          </div><p>Now, this Refresh Token can be used to get the Access Tokens as and when needed.</p><h2 id="Extending-OAuth"><a href="#Extending-OAuth" class="headerlink" title="Extending OAuth"></a>Extending OAuth</h2><p>With that, I’ll wind up my two-part series on OAuth. We have just touched the tip of the iceberg and there is certainly a lot more to explore within OAuth.</p><p>Leaving with some more resources to explore further:</p><ul><li><a href="https://auth0.com/docs/protocols/openid-connect-protocol">OAuth + Identity with Open ID Connect</a></li><li><a href="https://datatracker.ietf.org/doc/html/rfc8414">RFC 8414</a> Automatically Configuring the Client with OAuth Metadata </li><li><a href="https://datatracker.ietf.org/doc/html/rfc8628">RFC 8628</a> Securing Authorizing the IOT with OAuth Device Flow</li><li><a href="https://datatracker.ietf.org/doc/html/rfc8414">RFC 8414</a> Combing SAML and OAuth with SAML Assertion Grant</li><li><a href="https://datatracker.ietf.org/doc/html/rfc8693">RFC 8693</a> Securing Microservices with Token Exchange</li></ul>]]></content>
      
      
      <categories>
          
          <category> Security </category>
          
      </categories>
      
      
        <tags>
            
            <tag> #oauth </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OAuth for Dummies [Part 1] Why OAuth</title>
      <link href="/blog/why-oauth/"/>
      <url>/blog/why-oauth/</url>
      
        <content type="html"><![CDATA[<p><em><span class="github-emoji" alias="grey_exclamation" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2755.png?v8">&#x2755;</span> This is Part 1 of a two-part blog series on OAuth.</em><br><em>&nbsp;&nbsp;&nbsp;&nbsp;<a href="/blog/why-oauth/" title="Part 1: Why OAuth">Part 1: Why OAuth</a> focuses on the need for OAuth.</em><br><em>&nbsp;&nbsp;&nbsp;&nbsp;<a href="/blog/oauth-explained/" title="Part 2: OAuth in Detail">Part 2: OAuth in Detail</a> goes deep into the workings of OAuth.</em></p><h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>Are you someone who has heard about the buzzword OAuth, but never seemed to understand it fully? Or heck, even someone who understands OAuth, but never had the time to dive into why there was ever a need for this complex yet powerful framework? Then you are at the right place.</p><p>In this post, I am going to cover how OAuth evolved and what were some limitations that developers have faced throughout history.</p><p>Before we proceed, let’s clear up on some basics first.</p><h3 id="Authentication"><a href="#Authentication" class="headerlink" title="Authentication"></a>Authentication</h3><p>Authentication is the process of verifying identity. It helps confirm that people are who they say they are. It deals with login IDs and passwords.</p><h3 id="Authorization"><a href="#Authorization" class="headerlink" title="Authorization"></a>Authorization</h3><p>Authorization is the process of verifying what someone is allowed to do. It deals with permissions and roles associated with entities.</p><h2 id="The-Problem"><a href="#The-Problem" class="headerlink" title="The Problem"></a>The Problem</h2><p>Let’s consider the problem of API Authorization. We all have seen an option like this on various sites:</p>    <div>      <img src="/blog/why-oauth/integrate-with-api-1.jpg" alt="" data-action="zoom" class="photozoom">          </div><p>How exactly is an application allowed access to an API? Let’s say the API is responsible for sending an email on behalf of the user. That said, we wouldn’t want the application to perform other tasks like reading or deleting emails on the user’s behalf.</p><p>There exist a few solutions with which this can be achieved, let’s go through them one at a time.</p><h2 id="Solutions"><a href="#Solutions" class="headerlink" title="Solutions"></a>Solutions</h2><h3 id="1-Credential-Sharing"><a href="#1-Credential-Sharing" class="headerlink" title="(1) Credential Sharing"></a>(1) Credential Sharing</h3><p>The simplest solution is asking the user with the credentials to the API using a form like this:</p>    <div>      <img src="/blog/why-oauth/integrate-with-api-2.jpg" alt="" data-action="zoom" class="photozoom">          </div><p>There are a couple of issues associated with this method.</p><p><strong>Issue #1: Impersonation</strong></p><p>The application is impersonating the user. There is no way to know the difference between the application and the user. Because of this:</p><ul><li>We lose the ability to restrict access to the application. Instead of only being able to send emails, the application can also read and delete them.</li><li>The application can also access any other part of the API and potentially many other APIs. </li><li>If the application knows the username and password, then there is nothing stopping it from logging in as the user and changing the password.</li></ul><p><strong>Issue #2: Revocation</strong></p><p>What if the application has been compromised? How do we revoke those credentials?</p><ul><li>The user will have to go and change the password. Now, what if the password was being used at other websites? While we should encourage users to use different passwords for different websites, we should not penalize them for not doing so when we make a mistake. </li><li>So we not only do a disservice to the user, but we also break any other application using the API since the credentials they were using have now become invalid.</li></ul><p><strong>Issue #3: Exposed user credentials</strong></p><p>If we store the username and password to prevent the need to ask for them every time we need access:</p><ul><li>It increases the API attack surface.</li><li>The credentials will need to be stored in a reversible format within the consuming application. So instead of using a non-reversible password hashing algorithm, the app will have to<ul><li>Either encrypt it</li><li>Or store it in plain text</li></ul></li></ul><p><strong>Issue #4: Something you know</strong></p><p>Because these credentials need to be repeatable, the user credentials are therefore limited to a single factor – this is something you know. Because of this, security best practices like 2FA and MFA become unavailable to us.</p><p><strong>Issue #5: Federation</strong></p><p>For the same reason, we also cannot federate with other companies and applications.</p><p>Functionality such as login using a Google account or login using your corporate Azure AD account would not be possible unless the identity provider also used credential sharing – which is highly unlikely in today’s day and age.</p><p><strong>Issue #6: Incompatibilities</strong></p><p>Collecting external credentials with good intentions is known as <em>benevolent phishing</em>. This method would also restrict what application types we could use. </p><p>A single page application served from a cache with no backend server would have no chance of storing these credentials securely.</p><h3 id="2-Cookies"><a href="#2-Cookies" class="headerlink" title="(2) Cookies"></a>(2) Cookies</h3>    <div>      <img src="/blog/why-oauth/integrate-with-api-3.jpg" alt="" data-action="zoom" class="photozoom">          </div><p>Here we could redirect the user off to the API where they can enter the credentials and get a cookie. This allows the application to access the API and maybe restrict the access by having the user decide what functionality to allow. However, no matter what techniques we come up with, cookies will still be unsuitable because of:</p><div align="center">  <code>Cross-Site Request Forgery (CSRF, aka XSRF)</code></div><p>When a user logs in to the API, they get a cookie. Now the application can access data on the API. However, if the user opens another tab on the browser, and tries to access the same API, they will still be authorized. This goes for any other application running in the browser as well. So instead of authorizing the application to access our API, we’ve instead authorized the browser - hence opening to a world of pain.</p><h3 id="3-API-Keys"><a href="#3-API-Keys" class="headerlink" title="(3) API Keys"></a>(3) API Keys</h3>    <div>      <img src="/blog/why-oauth/integrate-with-api-4.jpg" alt="" data-action="zoom" class="photozoom">          </div><p>Here we ask the user to enter a key that was given to them by the API. There are many ways to implement API keys, but we are no longer exposing the user credentials to the application (<del>Impersonation</del>, <del>Exposed user credentials</del>).<br>We also no longer limit what authentication methods we can use in terms of factors (<del>Something you know</del>) and identity provider (<del>Federation</del>).<br>If we allow API keys to be generated per application, we can make key revocation much simpler (<del>Revocation</del>).<br>We can also create mechanisms to restrict permissions associated with each key to scope the key to only what the application needs.<br>However, while API keys solve a lot of problems of credential sharing, it still struggles with applications that cannot keep a secret.<br>So again if you have a single server application with no server backend, then you’re going to have problems keeping this key secure or away from the client device. (<del>Incompatibilities</del>)</p><p>API keys also have their own set of issues:</p><ul><li><strong>No Standards</strong>: API Keys depend on the implementation. There is no standard design method in creating the API key infrastructure.</li><li><strong>Expiration</strong>: Long-lived. This is good from a user perspective (since we don’t want to regenerate and redistribute the API keys every few days or weeks). However, the problem is that if the key gets stolen, it could be used indefinitely until discovered.</li></ul><h3 id="4-OAuth-2-0"><a href="#4-OAuth-2-0" class="headerlink" title="(4) OAuth 2.0"></a>(4) OAuth 2.0</h3><p><em>Finally, the solution we were waiting for.</em></p><p>Some facts about OAuth 2.0:</p><ul><li>It is an authorization framework</li><li>Built for HTTP APIs</li><li>Has scoped access, meaning that it allows access to only certain parts of the application</li><li>Is a delegation protocol, i.e. it allows applications to talk freely to other applications</li></ul><p>Let’s cover the working of OAuth 2.0 in the next section.</p><h2 id="OAuth-2-0-Players"><a href="#OAuth-2-0-Players" class="headerlink" title="OAuth 2.0 Players"></a>OAuth 2.0 Players</h2><div style="clear: both;">  <div style="float: left; margin-right: 1em;">    <img src="oauth-protected-resource.jpg" width="100"/>  </div>      <div>    <b>Protected Resource (HTTP API)</b>    <div>This is the user's resource we are trying to protect. It could be any data like Google Photos in the user's account.</div>  </div></div><p><div style="clear: both;">  <div style="float: left; margin-right: 1em;">    <img src="oauth-client-application.jpg" width="100"/>  </div>      <div>    <b>Client (Requesting Application)</b>    <div>This is the application that wants to gain access to the user's protected resource present in the domain of another application, and which is provided through HTTP APIs.    </div>  </div></div><p><div style="clear: both;">  <div style="float: left; margin-right: 1em;">    <img src="oauth-resource-owner.jpg" width="100"/>  </div>      <div>    <b>Resource Owner (The user)</b>    <div>The user who owns the protected resource. The protected resource may be an API that a company owns, however in OAuth, the data in the API belongs to the user and it’s theirs to authorize and consent other applications being able to access.</div>  </div></div><p><div style="clear: both;">  <div style="float: left; margin-right: 1em;">    <img src="oauth-authorization-server.jpg" width="100"/>  </div>      <div>    <b>Authorization Server</b>    <div>This is responsible for handling auth requests and trusted by all parties involved.</div>  </div></div><h2 id="A-typical-OAuth-request-flow"><a href="#A-typical-OAuth-request-flow" class="headerlink" title="A typical OAuth request flow"></a>A typical OAuth request flow</h2><div style="width: 550px; margin: auto;">        <div>      <img src="/blog/why-oauth/oauth-dance-1.jpg" alt="" data-action="zoom" class="photozoom">          </div></div><p>The client application sends an Authorization Request, which is granted by the Resource Owner. The Resource Owner authenticates itself on the Authorization Server and gives its consent for the application to gain access on the specified resources.</p><div style="width: 550px; margin: auto;">        <div>      <img src="/blog/why-oauth/oauth-dance-2.jpg" alt="" data-action="zoom" class="photozoom">          </div></div><p>The authorization is then granted in the form of an ‘Authorization Grant’, which is nothing but a physical representation of the user’s authorization of the client application to act on their behalf in the form of a random value that only the authorization server understands.</p><div style="width: 550px; margin: auto;">        <div>      <img src="/blog/why-oauth/oauth-dance-3.jpg" alt="" data-action="zoom" class="photozoom">          </div></div><p>The client application then makes a backchannel request away from the browser. In this request it includes</p><ol><li>the authorization grant it previously received </li><li>and also some way of authenticating itself as a valid client</li></ol><p>If everything checks out, the Authorization Server responds with an Access Token. Only the application that was given the Authorization Grant can swap it for a token.</p><div style="width: 550px; margin: auto;">        <div>      <img src="/blog/why-oauth/oauth-dance-4.jpg" alt="" data-action="zoom" class="photozoom">          </div></div><p>This Access Token can then be used by the client application to authorize requests to the protected resource. This is sent over using the authorization header with the scheme being defined by the Authorization Server. This is typically the <em>bearer scheme</em>, meaning that whoever has the Access Token can use it.</p><div style="width: 550px; margin: auto;">        <div>      <img src="/blog/why-oauth/oauth-dance-5.jpg" alt="" data-action="zoom" class="photozoom">          </div></div><p>When the Protected Resource receives the bearer token, it needs to verify in some way. This is where things get a little hazy as the exact structure of an access token and its validation procedure are again outside of the OAuth specification. It could be: </p><ol><li>structured data e.g. JSON Web token </li><li>or it could be completely unstructured</li></ol><p>We could verify it within the protected resource, or we could send it to the authorization server to be validated. Either way, the protected resource must verify that the token was issued by the Authorization Server that it trusts, and then be able to understand what user made the delegation and what permissions were delegated. If everything checks out, the client application is allowed access.</p><div style="width: 550px; margin: auto;">        <div>      <img src="/blog/why-oauth/oauth-dance-6.jpg" alt="" data-action="zoom" class="photozoom">          </div></div><p>The client will now get the desired response when it sends the request to the protected resource with the access token.</p><h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p>Consider a social coffee application called <em>Unground</em>, which offers the ability for the users to integrate their reward points account from a third-party company called <em>Bitter Brew</em>.</p><p>This is how the Unground app looks:</p>    <div>      <img src="/blog/why-oauth/oauth-example-1.jpg" alt="" data-action="zoom" class="photozoom">          </div><p>If we call the reward points API without authorization, we get a 401 unauthorized:</p>    <div>      <img src="/blog/why-oauth/oauth-example-2.jpg" alt="" data-action="zoom" class="photozoom">          </div><p>Let’s authorize first and see what happens:</p>    <div>      <img src="/blog/why-oauth/oauth-example-3.jpg" alt="" data-action="zoom" class="photozoom">          </div><p>We are now redirected to the Bitter Brew authorization server:</p>    <div>      <img src="/blog/why-oauth/oauth-example-4.png" alt="" data-action="zoom" class="photozoom">          </div><p>Once we authenticate, we are given the consent screen:</p>    <div>      <img src="/blog/why-oauth/oauth-example-5.jpg" alt="" data-action="zoom" class="photozoom">          </div><p>Here we are being informed of what the client application is trying to do – which in this case is to get read access to the reward points API. We are allowed to deny this request – which would simply stop the authorization process and return us to the client application.</p><p>We could pick and choose which permissions to grant, we should not be held hostage to the consent.<br>Once we authorize the client application, we are then returned back to our app.</p>    <div>      <img src="/blog/why-oauth/oauth-example-6.jpg" alt="" data-action="zoom" class="photozoom">          </div><p>The auth grant is then swapped for a token and now Unground can call the rewards API on our behalf. Let’s try it:</p>    <div>      <img src="/blog/why-oauth/oauth-example-7.jpg" alt="" data-action="zoom" class="photozoom">          </div><h2 id="Final-words"><a href="#Final-words" class="headerlink" title="Final words"></a>Final words</h2><p>OAuth got a lot of things right, by solving complex problems in a simple manner. It solved issues we saw earlier like Delegated Access, API access control, Separation of user &amp; client credentials, and User consent.</p><p>That said, a major misconception that should be clarified is that OAuth only solves for <a href="#Authorization">Authorization</a>, and not for <a href="#Authentication">Authentication</a>. If there is a need for identity verification along with OAuth, OpenID Connect is one way popular way that solves the use case.</p><hr><p><em>That’s it for Part 1 of the series, read the <a href="/blog/oauth-explained/" title="next part here">next part here</a> to go through OAuth in detail.</em> </p>]]></content>
      
      
      <categories>
          
          <category> Security </category>
          
      </categories>
      
      
        <tags>
            
            <tag> #oauth </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>5 Surprises to expect when learning Python</title>
      <link href="/blog/5-surprises-to-expect-when-learning-python/"/>
      <url>/blog/5-surprises-to-expect-when-learning-python/</url>
      
        <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>When Java is your everyday language, and you encounter Python occasionally as part of your day-to-day routine, Python can seem to be a bliss: you don’t need to go through docs or learn the language first in order to understand simple scripts written in Python. That’s when you realise the beauty of the language, but never seem to bother much about it. </p><p>Then there comes a point in time where you now want to write some Python code and the ability to simply read Python code does not suffice. You go to your favourite place to learn about new technology - i.e. the official docs. And while you are learning about it, in your mind you are comparing the features with your favourite (till now?) language: Java. You come across some “AHA!” moments and some “WTF?” moments.</p><p>Here are 5 such moments I faced when going through the same process of learning Python as a Java developer (leaving the categorisation between “AHA!” And “WTF?” to the reader’s imagination):</p><h2 id="The-5-surprises"><a href="#The-5-surprises" class="headerlink" title="The 5 surprises"></a>The 5 surprises</h2><h3 id="1-Docstrings-inside-functions"><a href="#1-Docstrings-inside-functions" class="headerlink" title="(1) Docstrings inside functions"></a>(1) Docstrings inside functions</h3><p>I really like the customisations we can do in the Javadoc comments over classes, methods etc. I heavily use a lot of <a href="http://www.drjava.org/docs/user/ch10.html#javadoc-writing">tags</a> while documenting stuff. </p><p>In Python, when I saw the docstrings are meant to be written inside the function definitions, it looked like an unclean approach! I mean, just compare the code documentation in the below examples:</p><p><strong>Example 1: JavaDoc in Java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Returns an Image object that can then be painted on the screen. </span></span><br><span class="line"><span class="comment">* The url argument must specify an absolute &lt;a href=&quot;#&#123;<span class="doctag">@link</span>&#125;&quot;&gt;&#123;<span class="doctag">@link</span> URL&#125;&lt;/a&gt;. The name</span></span><br><span class="line"><span class="comment">* argument is a specifier that is relative to the url argument. </span></span><br><span class="line"><span class="comment">* &lt;p&gt;</span></span><br><span class="line"><span class="comment">* This method always returns immediately, whether or not the </span></span><br><span class="line"><span class="comment">* image exists. When this applet attempts to draw the image on</span></span><br><span class="line"><span class="comment">* the screen, the data will be loaded. The graphics primitives </span></span><br><span class="line"><span class="comment">* that draw the image will incrementally paint on the screen. </span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span>  url  an absolute URL giving the base location of the image</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span>  name the location of the image, relative to the url argument</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span>      the image at the specified URL</span></span><br><span class="line"><span class="comment">* <span class="doctag">@see</span>         Image</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Image <span class="title">getImage</span><span class="params">(URL url, String name)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getImage(<span class="keyword">new</span> URL(url, name));</span><br><span class="line">    &#125; <span class="keyword">catch</span> (MalformedURLException e) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Example 2: DocString in Python</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">example_generator</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Generators have a ``Yields`` section instead of a ``Returns`` section.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        n (int): The upper limit of the range to generate, from 0 to `n` - 1.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Yields:</span></span><br><span class="line"><span class="string">        int: The next number in the range of 0 to `n` - 1.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Examples:</span></span><br><span class="line"><span class="string">        Examples should be written in doctest format, and should illustrate how</span></span><br><span class="line"><span class="string">        to use the function.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; print([i for i in example_generator(4)])</span></span><br><span class="line"><span class="string">        [0, 1, 2, 3]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        <span class="keyword">yield</span> i</span><br></pre></td></tr></table></figure><p>I tried to find a reasoning behind why this would be the case in Python, but looks like there doesn’t exist an official explanation. One possible reason and the only benefit I could think of is that in Python, unlike Java, we can access the doc through code using the <code>__doc__</code> utility, hence making it easy for the compiler to extract the doc from within the function than messing it up when trying to find it outside the function. </p><h3 id="2-Default-value-evaluates-only-once"><a href="#2-Default-value-evaluates-only-once" class="headerlink" title="(2) Default value evaluates only once"></a>(2) Default value evaluates only once</h3><p>In Python, a function like this will accumulate the arguments passed to it on subsequent calls:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">a, L=[]</span>):</span></span><br><span class="line">    L.append(a)</span><br><span class="line">    <span class="keyword">return</span> L</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(f(<span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(f(<span class="number">2</span>))</span><br><span class="line"><span class="built_in">print</span>(f(<span class="number">3</span>))</span><br></pre></td></tr></table></figure><p>This will print:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[1]</span><br><span class="line">[1, 2]</span><br><span class="line">[1, 2, 3]</span><br></pre></td></tr></table></figure><p>To avoid this and make this work in the Java-expected way (of not sharing the arguments between function calls), we need to put in extra efforts:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">a, L=<span class="literal">None</span></span>):</span></span><br><span class="line">    <span class="keyword">if</span> L <span class="keyword">in</span> <span class="literal">None</span>:</span><br><span class="line">        L=[]</span><br><span class="line">    L.append(a)</span><br><span class="line">    <span class="keyword">return</span> L</span><br></pre></td></tr></table></figure><h3 id="3-Mixed-casing"><a href="#3-Mixed-casing" class="headerlink" title="(3) Mixed casing"></a>(3) Mixed casing</h3><p>The naming of classes and functions is inconsistent. For classes, <code>UpperCamelCase</code> is the convention, while for functions and methods, <code>lowercase_with_underscores</code> is the convention.</p><p><em>(unclean_approach++?)</em></p><h3 id="4-No-private-attributes-inside-classes"><a href="#4-No-private-attributes-inside-classes" class="headerlink" title="(4) No private attributes inside classes"></a>(4) No private attributes inside classes</h3><p>Like whattt. But there exist a lot of hacks around the idea of private attributes in Python that require developer discipline. The language itself isn’t restricting the developer to misuse the phenomena!</p><h3 id="5-The-“Batteries-included-philosophy”"><a href="#5-The-“Batteries-included-philosophy”" class="headerlink" title="(5) The “Batteries included philosophy”"></a>(5) The “Batteries included philosophy”</h3><p>The Python source distribution has a rich and versatile standard library that is immediately available, without making the user download separate packages.</p><p>Functionality like formatting strings, json conversion, sending emails - are a few utilities among many which are available out of the box.</p><p>Think of doing the same in Java? Get ready to deal with JARs, or introduce dependency management tools like Maven!</p><h2 id="Final-words"><a href="#Final-words" class="headerlink" title="Final words"></a>Final words</h2><p>There are multiple other nuances in Python and Java but these 5 top the list for me which trigger my OCD associated with clean code (some in good ways and some in bad).</p><p>Let me know in the comments section what were some of your “AHA!” and “WTF?” moments!</p>]]></content>
      
      
      <categories>
          
          <category> Languages </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> #python </tag>
            
            <tag> #java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Organising Sequential Code Flow in Java with Easy-Workflow</title>
      <link href="/blog/organising-sequential-code-flow-in-java-with-easy-workflow/"/>
      <url>/blog/organising-sequential-code-flow-in-java-with-easy-workflow/</url>
      
        <content type="html"><![CDATA[<h2 id="The-Philosophy"><a href="#The-Philosophy" class="headerlink" title="The Philosophy"></a>The Philosophy</h2><p><em><span class="github-emoji" alias="grey_exclamation" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2755.png?v8">&#x2755;</span> Skip this section if you are not interested in the philosophy of good software engineering, and want to jump straight to the relevant stuff.</em></p><p>Software engineering <em>(the art)</em> is an interesting space in many aspects. One such aspect is the fact that the same tools can be used to solve a myriad of problems. To solve these problems, there can be numerous ways, none being perfect. At the same time, every solution has scope for improvement.</p><p>Software engineers’ <em>(the artist)</em> task is to take care of all these trade-offs and select the best approach to solve the business use-cases in a reasonable time, along with taking care of the software best practices along the way.</p><p>Enough of philosophy. Let’s get to the point now.</p><h2 id="The-Lazy-Long-Step-Based-Methods"><a href="#The-Lazy-Long-Step-Based-Methods" class="headerlink" title="The Lazy, Long Step-Based Methods"></a>The Lazy, Long Step-Based Methods</h2><p>Most of us may have come across situations where we need to implement algorithms that are sequential in manner. They simply require you to implement step 1, then step 2 and so on.</p><p>A naive implementation can simply have a method that handles all the steps. You can already see this method bloating, forget about its future maintenance.</p><p>In a relatively more mature implementation, the method call will be broken down into sub-methods, and the code may look something like this:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SomeAlgorithm</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">runAlgorithm</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        performStep1();</span><br><span class="line">        performStep2();</span><br><span class="line">        performStep3();</span><br><span class="line">        <span class="comment">// and so on...</span></span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">performStep1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">performStep2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">performStep3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Okay still better. But <em>(if you read the philosophy section above)</em>, no solution is perfect. Do you see where this approach can go wrong?</p><p>Let’s take an example. Suppose <code>performStep1()</code> requires you to gather data from some third party application, and then in the rest of the steps you are actually performing the algorithm. Maybe in one of the last few steps you want to write to the database. See what’s happening? This class is now handling so many things apart from the algorithm itself. <em>Separation of concerns?</em> Boom. Lost. </p><p>Hmm. So what can we do about it? Maybe we start thinking in terms of Object Oriented Principles and create different classes for each of these not-so-related tasks. This approach does make sense but only to the extent in which you were dealing with such a scenario once or twice in an application.</p><p>What if you expect the implementation of such algorithms at many places inside the codebase? So many classes, each handling different logic; but still kind of similar be a part of one single long-running algorithm. Feels chaotic already?</p><p>That’s where you need to start considering such problems as long-running tasks, which will not only help in doing away with bloated classes but also managing the algorithms in a streamlined manner. </p><p>This was one such problem I faced recently, and this article is about how I went on looking at these problems as “workflows” and creating a common solution for implementing them. I created a solution which I call the “Easy-Workflow”.</p><h2 id="Easy-Workflow-goodbye-long-methods"><a href="#Easy-Workflow-goodbye-long-methods" class="headerlink" title="Easy-Workflow - goodbye long methods!"></a>Easy-Workflow - goodbye long methods!</h2><h3 id="Why"><a href="#Why" class="headerlink" title="Why?"></a>Why?</h3><p>Many Java enterprise applications require processing to be executed in a context separate from that of the main system. In many cases, these backend processes perform several tasks, with some tasks dependent upon a previous task’s status. With the requirement of interdependent processing tasks, an implementation using a single procedural-style set of method calls usually proves inadequate. Utilizing Spring, a developer can easily separate a backend process into an aggregation of activities. Easy-Workflow helps to streamline this process.</p><h3 id="What"><a href="#What" class="headerlink" title="What?"></a>What?</h3><p>Easy-Workflow aims to make sequential and/or parallel execution of independent yet related activities in a more organized manner. It lets you define your desired workflow with independent activities. The definition of these activities can be provided by the client as per business needs. It comes with functionality such as contexts and customizable error handlers.</p><h3 id="When-to-use"><a href="#When-to-use" class="headerlink" title="When to use?"></a>When to use?</h3><p>In Easy-Workflow’s jargon, a workflow can be defined as a set of activities performed in a predetermined order without user interaction.</p><p>This approach, however, is not suggested as a replacement for existing workflow frameworks. For scenarios where more advanced interactions are necessarily based on user input, a standalone open-source or commercial workflow engine is better equipped.</p><p>If the workflow tasks at hand are simplistic, then the Easy-Workflow approach makes more sense, especially if Spring is already in use.</p><h3 id="Requirements"><a href="#Requirements" class="headerlink" title="Requirements"></a>Requirements</h3><ul><li>Java</li><li>Spring</li><li>Easy-Workflow JAR</li></ul><h3 id="Features"><a href="#Features" class="headerlink" title="Features"></a>Features</h3><ul><li>Interact with Spring using both XML-based Configuration and Annotation-based Configuration</li><li>Pass information between activities using <em>WorkflowContext</em></li><li>Customize <em>ErrorHandlers</em> at a per-activity level as well as a default-workflow level</li><li>Get detailed <em>WorkflowReport</em> once execution of Workflow is over</li></ul><h2 id="Architecture"><a href="#Architecture" class="headerlink" title="Architecture"></a>Architecture</h2><p>Easy-Workflow consists of the following components:</p><h3 id="Workflow-Engine"><a href="#Workflow-Engine" class="headerlink" title="Workflow Engine"></a>Workflow Engine</h3><p>A place to kick-start your workflow.</p><h3 id="Workflow"><a href="#Workflow" class="headerlink" title="Workflow"></a>Workflow</h3><p>A set of activities performed in a predetermined order without user interaction. The activities can be configured to either run in sequence, or in parallel, or using a hybrid approach.</p><h3 id="Activity"><a href="#Activity" class="headerlink" title="Activity"></a>Activity</h3><p>A single unit of work that can be performed independently. This is where the business logic needs to be defined.</p><h3 id="WorkflowContext"><a href="#WorkflowContext" class="headerlink" title="WorkflowContext"></a>WorkflowContext</h3><p>A utility to pass around information between different activities of a workflow. It can also be used to provide a seed to the first activity of the workflow.</p><h3 id="WorkflowReport"><a href="#WorkflowReport" class="headerlink" title="WorkflowReport"></a>WorkflowReport</h3><p>A unit that gives all details about how the workflow finished and contains any messages/errors to be returned to the caller.</p><h3 id="WorkflowStatus"><a href="#WorkflowStatus" class="headerlink" title="WorkflowStatus"></a>WorkflowStatus</h3><p>An enum to represent the status in which the workflow could have ended like completed, failed, stopped, or no operation.</p><h2 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h2><p>Let’s take a look at three examples in this section:</p><ul><li><a href="#Simple-Workflow-with-XML-based-Configuration">Simple Workflow with XML-based Configuration</a></li><li><a href="#Complex-Workflow-with-XML-based-Configuration">Complex Workflow with XML-based Configuration</a></li><li><a href="#Real-World-Workflow-with-Annotation-based-Configuration">Real-World Workflow with Annotation-based Configuration</a></li></ul><p>And finally:</p><ul><li><a href="#Starting-Workflow-Execution">Starting Workflow Execution</a> (common for all the three examples above)</li></ul><h3 id="Simple-Workflow-with-XML-based-Configuration"><a href="#Simple-Workflow-with-XML-based-Configuration" class="headerlink" title="Simple Workflow with XML-based Configuration"></a>Simple Workflow with XML-based Configuration</h3><p>Let’s take an example of a very simple workflow where three activities run in a sequential manner, and any error encountered while running these activities needs to be handled gracefully. We will explore the implementation with the help of an XML-based configuration. </p>    <div>      <img src="/blog/organising-sequential-code-flow-in-java-with-easy-workflow/SimpleWorkflow.png" alt="" data-action="zoom" class="photozoom">          </div><h4 id="beans-xml"><a href="#beans-xml" class="headerlink" title="beans.xml"></a>beans.xml</h4><p>This is the starting point of the workflow, where the bean definitions, as well as the workflow definition, is provided. In the first few lines, we have the bean definitions of <code>Activity1</code>, <code>Activity2</code>, <code>Activity3</code> along with <code>SimpleErrorHandler</code> and <code>SimpleContext</code>. Here, activities are custom implementations that will contain the business logic, and <code>SimpleErrorHandler</code> and <code>SimpleContext</code> are very basic implementations of <em>ErrorHandler</em> and <em>WorkflowContext</em>, respectively.</p><p>In the latter half of the code, we can see the definition of the workflow. The property <code>activities</code> is a list that actually defines all the activities (beans) that will run. They run in the order of the sequence defined in this list. This is the section which ties all the components of a workflow together, hence the mapping of <em>ErrorHandler</em> and <em>WorkflowContext</em> beans also exists here.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;activity1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;deeheem.coffeestore.examples.simple.Activity1&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;activity2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;deeheem.coffeestore.examples.simple.Activity2&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;activity3&quot;</span> <span class="attr">class</span>=<span class="string">&quot;deeheem.coffeestore.examples.simple.Activity3&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;defaultErrorHandler&quot;</span> <span class="attr">class</span>=<span class="string">&quot;deeheem.coffeestore.examples.simple.SimpleErrorHandler&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;simpleContext&quot;</span> <span class="attr">class</span>=<span class="string">&quot;deeheem.coffeestore.examples.simple.SimpleContext&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;prototype&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- simple workflow  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;simpleWorkflow&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.deeheem.easyworkflow.domain.workflow.DefaultWorkflow&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;activities&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;activity1&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;activity2&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;activity3&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;defaultErrorHandler&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;defaultErrorHandler&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;workflowContext&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;simpleContext&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Activity1-java"><a href="#Activity1-java" class="headerlink" title="Activity1.java"></a>Activity1.java</h4><p>Notice that the activities need to extend <code>BaseActivity</code> class which implements the interface <code>Activity</code>. <code>Base Activity</code> is an abstract implementation of <code>Activity</code> designed for re-use by business-specific activities. Both <code>BaseActivity</code> and <code>Activity</code> are present in the Easy-Workflow JAR itself.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Activity1</span> <span class="keyword">extends</span> <span class="title">BaseActivity</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(WorkflowContext context)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// business logic goes here</span></span><br><span class="line">        System.out.println(<span class="string">&quot;EXECUTE Activity1&quot;</span>);</span><br><span class="line">        SimpleContext simpleContext = (SimpleContext) context;</span><br><span class="line">        simpleContext.put(<span class="string">&quot;message1&quot;</span>, <span class="string">&quot;Data from Activity1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Activity2-java"><a href="#Activity2-java" class="headerlink" title="Activity2.java"></a>Activity2.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Activity2</span> <span class="keyword">extends</span> <span class="title">BaseActivity</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(WorkflowContext context)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// business logic goes here</span></span><br><span class="line">        System.out.println(<span class="string">&quot;EXECUTE Activity2&quot;</span>);</span><br><span class="line">        SimpleContext simpleContext = (SimpleContext) context;</span><br><span class="line">        simpleContext.put(<span class="string">&quot;message2&quot;</span>, <span class="string">&quot;Data from Activity2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Activity3-java"><a href="#Activity3-java" class="headerlink" title="Activity3.java"></a>Activity3.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Activity3</span> <span class="keyword">extends</span> <span class="title">BaseActivity</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(WorkflowContext context)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// business logic goes here</span></span><br><span class="line">        System.out.println(<span class="string">&quot;EXECUTE Activity3&quot;</span>);</span><br><span class="line">        SimpleContext simpleContext = (SimpleContext) context;</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, Object&gt; entry : simpleContext.getEntrySet()) &#123;</span><br><span class="line">            System.out.println(entry.getKey() + <span class="string">&quot;: &quot;</span> + entry.getValue());</span><br><span class="line">            System.out.println(entry.getKey() + <span class="string">&quot;: &quot;</span> + entry.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// uncomment the below line to invoke the error handler</span></span><br><span class="line">        <span class="comment">// throw new Exception(&quot;let&#x27;s see the error&quot;);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="SimpleContext-java"><a href="#SimpleContext-java" class="headerlink" title="SimpleContext.java"></a>SimpleContext.java</h4><p>SimpleContext implements the interface <code>WorkflowContext</code> provided in the Easy-Workflow JAR. </p><ul><li><code>setSeedData()</code> method can be used to provide information to the workflow at the time of kickoff, which may be required by other activities during the workflow run.</li><li><code>shouldWorkflowStop()</code> method is used by individual activities to inform the workflow to stop processing further due to some requirement/condition reached in the business logic. Note that this is <strong>not the same as</strong> the ability of the error handler to stop the workflow in case an error is encountered (something we will see in the next section). Instead, this particular function is used for handling business logic conditions rather than error scenarios.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleContext</span> <span class="keyword">implements</span> <span class="title">WorkflowContext</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SEED_DATA = <span class="string">&quot;seedData&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> AtomicBoolean stopProcess;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, Object&gt; context = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;(); <span class="comment">// to make it thread-safe</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSeedData</span><span class="params">(Object seedObject)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.put(SEED_DATA, seedObject);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AtomicBoolean <span class="title">shouldWorkflowStop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stopProcess;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStopProcess</span><span class="params">(AtomicBoolean stopProcess)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.stopProcess = stopProcess;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(String key, Object value)</span> </span>&#123;</span><br><span class="line">        context.put(key, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">get</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> context.get(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Set&lt;Map.Entry&lt;String, Object&gt;&gt; getEntrySet() &#123;</span><br><span class="line">        <span class="keyword">return</span> context.entrySet();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="SimpleErrorHandler-java"><a href="#SimpleErrorHandler-java" class="headerlink" title="SimpleErrorHandler.java"></a>SimpleErrorHandler.java</h4><p>SimpleErrorHandler implements the interface <code>ErrorHandler</code> provided in the Easy-Workflow JAR, which defines a strategy for handling errors/exceptions which may arise during the execution of an activity.  </p><ul><li><code>handleError()</code> handles the given error, possibly rethrowing it as a fatal exception.</li><li>It is up to the developer to decide how to handle the error inside this method.</li><li>This method can also be used to handle errors from composite activities like <code>ConcurrentActivity</code> (discussed in upcoming sections).</li><li>If you notice, the return type of this method is <code>boolean</code>. This specifies whether the execution of workflow needs to be stopped on encountering an error, and can be customized by the developer implementing the business logic based on the needs.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleErrorHandler</span> <span class="keyword">implements</span> <span class="title">ErrorHandler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String beanName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">handleError</span><span class="params">(WorkflowContext context, Exception exception)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBeanName</span><span class="params">(String beanName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.beanName = beanName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Complex-Workflow-with-XML-based-Configuration"><a href="#Complex-Workflow-with-XML-based-Configuration" class="headerlink" title="Complex Workflow with XML-based Configuration"></a>Complex Workflow with XML-based Configuration</h3><p>Now let’s take a more complicated example consisting of parallel activity runs, in a combination with some activities which run in sequence.</p>    <div>      <img src="/blog/organising-sequential-code-flow-in-java-with-easy-workflow/ComplexWorkflow.png" alt="" data-action="zoom" class="photozoom">          </div><p>As shown in the diagram above, two activities run in parallel and once both of them have completed their execution, the flow then passes to the other two activities. Notice that the error handlers are different for concurrent and sequential executions.</p><p>On a side note, you can also define your own custom error handler on as many of the activities as you like.</p><h4 id="beans-xml-1"><a href="#beans-xml-1" class="headerlink" title="beans.xml"></a>beans.xml</h4><p>Similar to the previous example, this is the starting point of the workflow. Let’s focus on the special beans here.</p><p><code>c_activity1</code> represents Activity 1 which runs two sub-activities concurrently. We define these sub-activities inside the property <code>parallelActivities</code> as list, although note that the order inside this list does not matter during execution since the beans in the list <code>c_pActivity1</code> and <code>c_pActivity2</code> will run in parallel.</p><p>Inside the workflow definition, we have defined activities <code>c_activity1</code>, <code>c_activity2</code> and <code>c_activity3</code> to run in sequence, hence completing our objective of running the workflow as per the diagram.</p><p>Note that in the case of complex workflows with concurrent activities, we have the option to define the <code>maxThreadPoolSize</code> to control how many threads at the maximum do we want to spawn during the workflow run.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;c_pActivity1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;deeheem.coffeestore.examples.complex.PActivity1&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;c_pActivity2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;deeheem.coffeestore.examples.complex.PActivity2&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;c_activity1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;deeheem.coffeestore.examples.complex.Activity1&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;parallelActivities&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;c_pActivity1&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;c_pActivity2&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;errorHandler&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;c_concurrentErrorHandler&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;c_activity2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;deeheem.coffeestore.examples.complex.Activity2&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;c_activity3&quot;</span> <span class="attr">class</span>=<span class="string">&quot;deeheem.coffeestore.examples.complex.Activity3&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;c_defaultErrorHandler&quot;</span> <span class="attr">class</span>=<span class="string">&quot;deeheem.coffeestore.examples.complex.SimpleErrorHandler&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;c_concurrentErrorHandler&quot;</span> <span class="attr">class</span>=<span class="string">&quot;deeheem.coffeestore.examples.complex.ConcurrentErrorHandler&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;c_simpleContext&quot;</span> <span class="attr">class</span>=<span class="string">&quot;deeheem.coffeestore.examples.complex.SimpleContext&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;prototype&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- complex workflow  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;complexWorkflow&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.deeheem.easyworkflow.domain.workflow.DefaultWorkflow&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;activities&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;c_activity1&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;c_activity2&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;c_activity3&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;defaultErrorHandler&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;c_defaultErrorHandler&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;workflowContext&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;c_simpleContext&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxThreadPoolSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;4&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="PActivity1-java"><a href="#PActivity1-java" class="headerlink" title="PActivity1.java"></a>PActivity1.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PActivity1</span> <span class="keyword">extends</span> <span class="title">BaseActivity</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(WorkflowContext context)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;EXECUTE PActivity1&quot;</span>);</span><br><span class="line">        SimpleContext simpleContext = (SimpleContext) context;</span><br><span class="line">        simpleContext.put(<span class="string">&quot;message1&quot;</span>, <span class="string">&quot;Data from PActivity1&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// note: uncomment below lines to see how exception is handled in parallel activities</span></span><br><span class="line">        <span class="comment">//        int b=0;</span></span><br><span class="line">        <span class="comment">//        try &#123;</span></span><br><span class="line">        <span class="comment">//            int c = 10 / b;</span></span><br><span class="line">        <span class="comment">//        &#125; catch (Exception e) &#123;</span></span><br><span class="line">        <span class="comment">//            System.out.println(&quot;test exception&quot;);</span></span><br><span class="line">        <span class="comment">//            throw new Exception(&quot;test exception&quot;, e);</span></span><br><span class="line">        <span class="comment">//        &#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="PActivity2-java"><a href="#PActivity2-java" class="headerlink" title="PActivity2.java"></a>PActivity2.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PActivity2</span> <span class="keyword">extends</span> <span class="title">BaseActivity</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(WorkflowContext context)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;EXECUTE PActivity2&quot;</span>);</span><br><span class="line">        SimpleContext simpleContext = (SimpleContext) context;</span><br><span class="line">        simpleContext.put(<span class="string">&quot;message2&quot;</span>, <span class="string">&quot;Data from PActivity2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Activity1-java-1"><a href="#Activity1-java-1" class="headerlink" title="Activity1.java"></a>Activity1.java</h4><p>Note that <code>Activity1</code> needs to extend <code>ConcurrentActivity</code> in order to support concurrent execution of the sub-activities.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Activity1</span> <span class="keyword">extends</span> <span class="title">ConcurrentActivity</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(WorkflowContext context)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;EXECUTE Activity1&quot;</span>);</span><br><span class="line">        SimpleContext simpleContext = (SimpleContext) context;</span><br><span class="line">        simpleContext.put(<span class="string">&quot;message1&quot;</span>, <span class="string">&quot;Data from Activity1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Activity2-java-1"><a href="#Activity2-java-1" class="headerlink" title="Activity2.java"></a>Activity2.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Activity2</span> <span class="keyword">extends</span> <span class="title">BaseActivity</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(WorkflowContext context)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;EXECUTE Activity2&quot;</span>);</span><br><span class="line">        SimpleContext simpleContext = (SimpleContext) context;</span><br><span class="line">        simpleContext.put(<span class="string">&quot;message2&quot;</span>, <span class="string">&quot;Data from Activity2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Activity3-java-1"><a href="#Activity3-java-1" class="headerlink" title="Activity3.java"></a>Activity3.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Activity3</span> <span class="keyword">extends</span> <span class="title">BaseActivity</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(WorkflowContext context)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;EXECUTE Activity3&quot;</span>);</span><br><span class="line">        SimpleContext simpleContext = (SimpleContext) context;</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, Object&gt; entry : simpleContext.getEntrySet()) &#123;</span><br><span class="line">            System.out.println(entry.getKey() + <span class="string">&quot;: &quot;</span> + entry.getValue());</span><br><span class="line">            System.out.println(entry.getKey() + <span class="string">&quot;: &quot;</span> + entry.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//   throw new Exception(&quot;let&#x27;s see the error&quot;);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="SimpleContext-java-1"><a href="#SimpleContext-java-1" class="headerlink" title="SimpleContext.java"></a>SimpleContext.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleContext</span> <span class="keyword">implements</span> <span class="title">WorkflowContext</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SEED_DATA = <span class="string">&quot;seedData&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> AtomicBoolean stopProcess;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, Object&gt; context = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;(); <span class="comment">// to make it thread-safe</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSeedData</span><span class="params">(Object seedObject)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.put(SEED_DATA, seedObject);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AtomicBoolean <span class="title">shouldWorkflowStop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stopProcess;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStopProcess</span><span class="params">(AtomicBoolean stopProcess)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.stopProcess = stopProcess;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(String key, Object value)</span> </span>&#123;</span><br><span class="line">        context.put(key, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">get</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> context.get(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Set&lt;Map.Entry&lt;String, Object&gt;&gt; getEntrySet() &#123;</span><br><span class="line">        <span class="keyword">return</span> context.entrySet();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="SimpleErrorHandler-java-1"><a href="#SimpleErrorHandler-java-1" class="headerlink" title="SimpleErrorHandler.java"></a>SimpleErrorHandler.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleErrorHandler</span> <span class="keyword">implements</span> <span class="title">ErrorHandler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String beanName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">handleError</span><span class="params">(WorkflowContext context, Exception exception)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBeanName</span><span class="params">(String beanName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.beanName = beanName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Real-World-Workflow-with-Annotation-based-Configuration"><a href="#Real-World-Workflow-with-Annotation-based-Configuration" class="headerlink" title="Real-World Workflow with Annotation-based Configuration"></a>Real-World Workflow with Annotation-based Configuration</h3><p><em><span class="github-emoji" alias="grey_exclamation" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2755.png?v8">&#x2755;</span> Disclaimer: The example in this section, even though termed as a “Real-World Workflow”, is still fictional and may not directly apply to suit similar use-cases.</em></p><p>Imagine you are a developer of an app for a store specializing in different types of coffee. The store curates the best coffee from all over the world, and customers have the ability to subscribe to a monthly newsletter from where they can try out a new type of coffee every month. You, being very particular about the preferences of each customer, want the newsletter to be customised to each customer. <em>(Before we digress, we are not going the Machine Learning way. This is NOT an article on Machine Learning.)</em> </p><p>Now as always, the problem has many nuances and can be solved in multiple ways. Let’s explore one such way a typical store might want to solve it: from all the coffee available at the store, enhance the existing data with customer’s preferences, manufacturer details, tailored prices, and then save the details for notifying the customers at a relevant point in time.</p><p>If we think of the Easy-Workflow approach, we can easily break down the problem in the following way:</p>    <div>      <img src="/blog/organising-sequential-code-flow-in-java-with-easy-workflow/RealWorkflow.png" alt="" data-action="zoom" class="photozoom">          </div><p>Makes sense? </p><p>Note that whenever you trying to break down the problem into a flowchart like this to make use of Easy-Workflow, make sure that you create a Directed Acyclic Graph (DAG).</p><h4 id="CoffeeNewsletterConfiguration-java"><a href="#CoffeeNewsletterConfiguration-java" class="headerlink" title="CoffeeNewsletterConfiguration.java"></a>CoffeeNewsletterConfiguration.java</h4><p>Let’s see how we can create the beans for this application using annotation-based approach.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CoffeeNewsletterConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ---- Error Handlers ----</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(value = &quot;parallelErrorHandler&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ErrorHandler <span class="title">parallelErrorHandler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ParallelErrorHandler();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(value = &quot;fallbackErrorHandler&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ErrorHandler <span class="title">fallbackErrorHandler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> FallbackErrorHandler();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ---- Activities ----</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(value = &quot;activity_A&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BaseActivity <span class="title">coffeeDetailsActivity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CoffeeDetailsActivity();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(value = &quot;activity_B1&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BaseActivity <span class="title">manufacturerDetailsActivity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ManufacturerDetailsActivity();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean(value = &quot;activity_B2&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BaseActivity <span class="title">priceCalculatorActivity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> PriceCalculatorActivity();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(value = &quot;activity_B3&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BaseActivity <span class="title">customerPreferenceActivity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CustomerPreferenceActivity();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(value = &quot;activity_B&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BaseActivity <span class="title">parallelDataActivity</span><span class="params">(<span class="meta">@Qualifier(&quot;activity_B1&quot;)</span> BaseActivity activityA,</span></span></span><br><span class="line"><span class="params"><span class="function">                                            <span class="meta">@Qualifier(&quot;activity_B2&quot;)</span> BaseActivity activityB,</span></span></span><br><span class="line"><span class="params"><span class="function">                                            <span class="meta">@Qualifier(&quot;activity_B3&quot;)</span> BaseActivity activityC,</span></span></span><br><span class="line"><span class="params"><span class="function">                                            <span class="meta">@Qualifier(&quot;parallelErrorHandler&quot;)</span> ErrorHandler errorHandler)</span> </span>&#123;</span><br><span class="line">        List&lt;BaseActivity&gt; activities = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        activities.add(activityA);</span><br><span class="line">        activities.add(activityB);</span><br><span class="line">        activities.add(activityC);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ParallelDataActivity(activities, errorHandler);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(value = &quot;activity_C&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BaseActivity <span class="title">combineCoffeeDetailsActivity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CombineCoffeeDetailsActivity();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(value = &quot;activity_D&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BaseActivity <span class="title">saveActivity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SaveActivity();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ---- Context ----</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(value = &quot;workflowContext&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> WorkflowContext <span class="title">workflowContext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ThisWorkflowContext();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ---- Workflow ----</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DefaultWorkflow <span class="title">coffeeNewsletterWorkflow</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">            <span class="meta">@Qualifier(&quot;workflowContext&quot;)</span> WorkflowContext workflowContext,</span></span></span><br><span class="line"><span class="params"><span class="function">            <span class="meta">@Qualifier(&quot;fallbackErrorHandler&quot;)</span> ErrorHandler errorHandler,</span></span></span><br><span class="line"><span class="params"><span class="function">            <span class="meta">@Qualifier(&quot;activity_A&quot;)</span> BaseActivity activityA,</span></span></span><br><span class="line"><span class="params"><span class="function">            <span class="meta">@Qualifier(&quot;activity_B&quot;)</span> BaseActivity activityB,</span></span></span><br><span class="line"><span class="params"><span class="function">            <span class="meta">@Qualifier(&quot;activity_C&quot;)</span> BaseActivity activityC,</span></span></span><br><span class="line"><span class="params"><span class="function">            <span class="meta">@Qualifier(&quot;activity_D&quot;)</span> BaseActivity activityD)</span> </span>&#123;</span><br><span class="line">        List&lt;Activity&gt; activityList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        activityList.add(activityA);</span><br><span class="line">        activityList.add(activityB);</span><br><span class="line">        activityList.add(activityC);</span><br><span class="line">        activityList.add(activityD);</span><br><span class="line"></span><br><span class="line">        DefaultWorkflow defaultWorkflow = <span class="keyword">new</span> DefaultWorkflow();</span><br><span class="line">        defaultWorkflow.setActivities(activityList);</span><br><span class="line">        defaultWorkflow.setDefaultErrorHandler(errorHandler);</span><br><span class="line">        defaultWorkflow.setWorkflowContext(workflowContext);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> defaultWorkflow;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Notice that <code>ParallelErrorHandler</code> is being used for handling errors occurring in the concurrent execution, i.e. inside the bean definition <code>activity_B</code>. Also <code>FallbackErrorHandler</code> is the common handler which the workflow uses across all activities.</p><h4 id="CoffeeDetailsActivity-java"><a href="#CoffeeDetailsActivity-java" class="headerlink" title="CoffeeDetailsActivity.java"></a>CoffeeDetailsActivity.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CoffeeDetailsActivity</span> <span class="keyword">extends</span> <span class="title">BaseActivity</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    CoffeeDetailsFetcherService coffeeDetailsFetcherService; <span class="comment">// to fetch coffee details from DB</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(WorkflowContext context)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Inside CoffeeDetailsActivity&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Starting Coffee Sync&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            coffeeDetailsFetcherService.fetchCoffee();</span><br><span class="line">            <span class="comment">// rest of business logic here</span></span><br><span class="line">            <span class="comment">// <span class="doctag">NOTE:</span> you can pass on the data from this activity to the rest of the activities through the &quot;context&quot;, the implementation of which can be customized as per the needs. It can contains any data structures that will fit the business needs.</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Error in syncing coffee.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;Coffee Sync completed&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="ParallelDataActivity-java"><a href="#ParallelDataActivity-java" class="headerlink" title="ParallelDataActivity.java"></a>ParallelDataActivity.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ParallelDataActivity</span> <span class="keyword">extends</span> <span class="title">ConcurrentActivity</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ParallelDataActivity</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">            List&lt;BaseActivity&gt; parallelActivities,</span></span></span><br><span class="line"><span class="params"><span class="function">            ErrorHandler errorHandler)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.setParallelActivities(parallelActivities);</span><br><span class="line">        <span class="keyword">this</span>.setErrorHandler(errorHandler);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(WorkflowContext context)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Inside GetParallelDataActivity&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="ManufacturerDetailsActivity-java"><a href="#ManufacturerDetailsActivity-java" class="headerlink" title="ManufacturerDetailsActivity.java"></a>ManufacturerDetailsActivity.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ManufacturerDetailsActivity</span> <span class="keyword">extends</span> <span class="title">BaseActivity</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(WorkflowContext context)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Inside ManufacturerDetailsActivity&quot;</span>);</span><br><span class="line">        <span class="comment">// logic to get the manufacturer details and append it with the coffee details present in the context</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="PriceCalculatorActivity-java"><a href="#PriceCalculatorActivity-java" class="headerlink" title="PriceCalculatorActivity.java"></a>PriceCalculatorActivity.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PriceCalculatorActivity</span> <span class="keyword">extends</span> <span class="title">BaseActivity</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(WorkflowContext context)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Inside PriceCalculatorActivity&quot;</span>);</span><br><span class="line">        <span class="comment">// logic to tailor the price on various factors like place of origin, manufacturer details, profit margin, etc.</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="CustomerPreferenceActivity-java"><a href="#CustomerPreferenceActivity-java" class="headerlink" title="CustomerPreferenceActivity.java"></a>CustomerPreferenceActivity.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerPreferenceActivity</span> <span class="keyword">extends</span> <span class="title">BaseActivity</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(WorkflowContext context)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Inside CustomerPreferenceActivity&quot;</span>);</span><br><span class="line">        <span class="comment">// logic to integrate the information as per customer preferences according to the requirements</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="CombineCoffeeDetailsActivity-java"><a href="#CombineCoffeeDetailsActivity-java" class="headerlink" title="CombineCoffeeDetailsActivity.java"></a>CombineCoffeeDetailsActivity.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CombineCoffeeDetailsActivity</span> <span class="keyword">extends</span> <span class="title">BaseActivity</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(WorkflowContext context)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Inside CombineCoffeeDetailsActivity&quot;</span>);</span><br><span class="line">        <span class="comment">// logic to get all the data from the previous activities and combine it as per the needs</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="SaveActivity-java"><a href="#SaveActivity-java" class="headerlink" title="SaveActivity.java"></a>SaveActivity.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SaveActivity</span> <span class="keyword">extends</span> <span class="title">BaseActivity</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(WorkflowContext context)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Inside SaveActivity&quot;</span>);</span><br><span class="line">        <span class="comment">// logic to save the processed information so that it can be sent to the customers at an appropriate time</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="ThisWorkflowContext-java"><a href="#ThisWorkflowContext-java" class="headerlink" title="ThisWorkflowContext.java"></a>ThisWorkflowContext.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThisWorkflowContext</span> <span class="keyword">implements</span> <span class="title">WorkflowContext</span> </span>&#123;</span><br><span class="line">    <span class="comment">// as mentioned earlier, the data structures inside the context are totally customizable </span></span><br><span class="line">    <span class="comment">// some example are:</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;CoffeeDetail&gt; coffeeDetails;</span><br><span class="line">    <span class="keyword">private</span> List&lt;ManufacturerDetail&gt; manufacturerDetails;</span><br><span class="line">    <span class="comment">// note that this data is in-memory and is used to pass to other activities.</span></span><br><span class="line">    <span class="comment">// data used locally in one activity need not be present inside the context.</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// getters and setters for above...</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AtomicBoolean <span class="title">shouldWorkflowStop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>; <span class="comment">// true as we cannot tolerate any errors in any activity, and would ideally like the workflow to be stopped in case of errors</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSeedData</span><span class="params">(Object seedObject)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// here we can seed the workflow with any external data if we want, and then utilize the seed data in any of the activities</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="ParallelErrorHandler-java"><a href="#ParallelErrorHandler-java" class="headerlink" title="ParallelErrorHandler.java"></a>ParallelErrorHandler.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ParallelErrorHandler</span> <span class="keyword">implements</span> <span class="title">ErrorHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">handleError</span><span class="params">(WorkflowContext context, Exception exception)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBeanName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="FallbackErrorHandler-java"><a href="#FallbackErrorHandler-java" class="headerlink" title="FallbackErrorHandler.java"></a>FallbackErrorHandler.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FallbackErrorHandler</span> <span class="keyword">implements</span> <span class="title">ErrorHandler</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">handleError</span><span class="params">(WorkflowContext context, Exception exception)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBeanName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Starting-Workflow-Execution"><a href="#Starting-Workflow-Execution" class="headerlink" title="Starting Workflow Execution"></a>Starting Workflow Execution</h3><p>Starting a workflow execution is as simple as creating a <em>WorkflowEngine</em> and seeding it with:</p><ul><li>the workflow to be run</li><li>any seed data to be sent from the outside world</li></ul><p><code>DefaultWorkflowEngine</code> is a default implementation of <em>WorkflowEngine</em> provided inside the Easy-Workflow JAR.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WorkflowController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    Workflow coffeeNewsletterWorkflow;</span><br><span class="line">    </span><br><span class="line">    DefaultWorkflowEngine engine = <span class="keyword">new</span> WorkflowEngine();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">generateCoffeeNewsletter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        WorkflowReport report = engine.run(</span><br><span class="line">            coffeeNewsletterWorkflow, </span><br><span class="line">            <span class="keyword">null</span> <span class="comment">// replace with seed data you want to send to the workflow </span></span><br><span class="line">        );   </span><br><span class="line">        </span><br><span class="line">        <span class="comment">// retrieve status of workflow using:</span></span><br><span class="line">        report.getStatus();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// retrieve completion/failure message using:</span></span><br><span class="line">        report.getMessage();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// retrieve Throwable object in case of an error using:</span></span><br><span class="line">        report.getError();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// access workflowContext using:</span></span><br><span class="line">        report.getWorkflowContext();</span><br><span class="line">        <span class="comment">// above makes it possible to use context for sending the processed data to the outside workflow</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="The-Inabilities"><a href="#The-Inabilities" class="headerlink" title="The Inabilities"></a>The Inabilities</h2><p>Just like any software is not suitable for all the needs, Easy-Workflow is no exception. Though it is totally extendable for some more scenarios.</p><h3 id="State-Persistence"><a href="#State-Persistence" class="headerlink" title="State Persistence"></a>State Persistence</h3><p>Easy-Workflow maintains an in-memory state for now. This can be persisted after every activity which can reap up more benefits like:</p><ul><li>restarting the workflow mid-way</li><li>monitoring execution and analysing at a more granular level</li></ul><h3 id="Manual-Intervention"><a href="#Manual-Intervention" class="headerlink" title="Manual Intervention"></a>Manual Intervention</h3><p>Easy-Workflow is not suitable for workflows requiring manual intervention in some of the activities like pausing -&gt; notifying stakeholders -&gt; seeking approvals -&gt; then continuing the rest of the workflow on getting the approvals.</p><h3 id="Distributed-Workflow"><a href="#Distributed-Workflow" class="headerlink" title="Distributed Workflow"></a>Distributed Workflow</h3><p>Easy-Workflow runs the workflow on a single machine as of now. So to deal with larger data, it can be enhanced so that the activities run on different machines and the workflow can be controlled in a more distributed fashion.</p><p>Having said that, enhancing Easy-Workflow to solve for distributed use-cases steals our initial purpose: it’s not easy anymore! :)</p><h2 id="Final-Words"><a href="#Final-Words" class="headerlink" title="Final Words"></a>Final Words</h2><p>Do you now see how we were able to achieve separation of concerns in a concise and organized manner? Personally, my OCD with clean code definitely got much better when I implemented this to solve one of very complex business use-cases at work!</p>]]></content>
      
      
      <categories>
          
          <category> Languages </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> #java </tag>
            
            <tag> #spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Upskilling at a time of COVID-19 lockdown</title>
      <link href="/blog/upskilling-at-a-time-of-covid-19-lockdown/"/>
      <url>/blog/upskilling-at-a-time-of-covid-19-lockdown/</url>
      
        <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>We are going through unprecedented times. On an everyday basis, I am seeing my juniors revealing the news of their revoked job/internship offers, despite their calibre, despite their skills, despite being from the best of colleges. This situation might impact many more people, but the first brunt of the crisis has to be borne by fresh graduates, <em>raison d’être</em> their lack of industry experience.</p><p>Despite the scenario, something that is definitely in our hands is to upskill ourselves by learning the skills that we would have learned being on a job! This article is an attempt to help and guide fresh graduates to learn some very basic skills required to work well in tech companies — the exposure that we don’t usually get in college.</p><p>So here you go!</p><h2 id="Tools"><a href="#Tools" class="headerlink" title="Tools"></a>Tools</h2><h3 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h3><div style="clear: both;">  <div style="float: left; margin-right: 1em;">    <img src="git.png" width="100"/>  </div>      <div>    The importance of this skill cannot be emphasized enough. Just like you can’t read without knowing the alphabet, you can’t code without knowing the efficient use of this version control system. <em>(Okay, this might be an exaggeration, but you get the point!)</em>  </div></div><p>In companies, you work in a team and teams write code together. You need to know how branching works, how merging code from various team members works, what resolving merge conflicts mean. These features provided by <a href="https://git-scm.com/">Git</a> are meant to make the processes efficient, and if you are not well-versed with this skill, it can rob you off of some precious time which could have gone into designing another important feature (or your coffee break maybe).</p><h3 id="Java-—-not-just-OOPS-but-actual-industry-level-Java"><a href="#Java-—-not-just-OOPS-but-actual-industry-level-Java" class="headerlink" title="Java — not just OOPS, but actual industry level Java"></a>Java — not just OOPS, but actual industry level Java</h3><div style="clear: both;">  <div style="float: left; margin-right: 1em;">    <img src="java.png" width="100"/>  </div>      <div>    Well, this is if your job profile works around Java. The Java that most of us are familiar with comprises basic OOPS level concepts — which is just the bare minimum that’s required to enter the world of Java. So, if you are not clear with OOPS concepts, please stop reading further, revise/learn them, and then continue reading this article further.  </div></div><p>Java has advanced multiple folds and there are so many features that you can learn. For starters, you can explore the <a href="https://www.journaldev.com/2389/java-8-features-with-examples">Java 8 features</a>. Simply knowing them is not sufficient, applying them is an art as well. The beauty of these new features is you can minimise the number of lines of code by leaps and bounds.</p><p><code>Do you know why 128 == 128 is true, but 127 == 127 is false, while using Integer wrapper in Java?</code></p><p><em>(Hint: explore the Integer class and its implementation!)</em></p><h3 id="Unit-Tests"><a href="#Unit-Tests" class="headerlink" title="Unit Tests"></a>Unit Tests</h3><p>I’m sure you had a boring software development course in college, which taught you the theory about unit testing, integration testing, regression testing and what not! Well if you are a developer, you are less likely to worry about the majority of the testing part, but unit tests are something that you may have to deal with on a daily basis. Learning the basics of some frameworks like <a href="https://junit.org/junit4/">JUnit</a> and <a href="https://site.mockito.org/">Mockito</a> will come in handy!</p><h3 id="SOLID-Design-Principles"><a href="#SOLID-Design-Principles" class="headerlink" title="SOLID Design Principles"></a>SOLID Design Principles</h3><div style="clear: both;">  <div style="float: left; margin-right: 1em;">    <img src="solid.png" width="100"/>  </div>      <div>    Now, this is again something you haven’t heard enough in college, but as soon as you start working as a developer, these principles are your holy grail! When applied properly it makes your code more extendable, logical, and easier to read. A bad design can make the code inflexible and more brittle. Small changes in the software can result in bugs.  </div></div><p>Now that we are talking about <acronym title="Single-responsibility principle, Open–closed principle, Liskov substitution principle, Interface segregation principle, Dependency inversion principle">SOLID</acronym> principles, it makes sense to explore various frameworks. You can explore <a href="https://spring.io/">Spring</a>, which is a very powerful Java framework that has simplified Java EE development and made developers more productive.</p><p>The team you may join might not be using all features of Spring, maybe it’s using <a href="https://github.com/google/guice">Google Guice</a> as an <acronym title="Inversion Of Control">IOC</acronym>, <a href="https://jersey.github.io/">Jersey</a> for <acronym title="Representational State Transfer">REST</acronym> services and <a href="https://cayenne.apache.org/">Apache Cayenne</a> as an <acronym title="Object-Relational Mapping">ORM</acronym>. But this is something very specific which you can easily catch-up to, after having a piece of basic knowledge.</p><h3 id="Deployment"><a href="#Deployment" class="headerlink" title="Deployment"></a>Deployment</h3><div style="clear: both;">  <div style="float: left; margin-right: 1em;">    <img src="tomcat.png" width="100"/>  </div>      <div>    Ok, you’ve built your application. You’ve really brainstormed your way through the best design principles you could. You’ve tested it thoroughly. Now, how do you deploy it? Read up on it!  </div></div><p><em>Tip:</em> <a href="https://tomcat.apache.org/">Apache Tomcat</a> is something which is one of the most popular servlet containers available, it has been used to power a wide range of applications and websites across the Internet. You can learn about how Tomcat enables quick load and redeploy times.</p><h3 id="Basic-Unix-commands"><a href="#Basic-Unix-commands" class="headerlink" title="Basic Unix commands"></a>Basic Unix commands</h3><p><a href="http://mally.stanford.edu/~sr/computing/basic-unix.html">Unix commands</a> are something you cannot escape. You will need them at some point, even if you are a holy Windows programmer. And, they aren’t so hard to learn after all.</p><p>You can go through <a href="https://www.thegeekstuff.com/2010/11/50-linux-commands/">this</a> link as starters and explore further!</p><h3 id="Basic-knowledge-of-HTML-CSS-and-JavaScript"><a href="#Basic-knowledge-of-HTML-CSS-and-JavaScript" class="headerlink" title="Basic knowledge of HTML, CSS and JavaScript"></a>Basic knowledge of HTML, CSS and JavaScript</h3><p>Well, whether you are in Front End Development or not, you might end up in a team that is into Front End Development. With the numerous <a href="https://hackernoon.com/how-it-feels-to-learn-javascript-in-2016-d3a717dd577f">libraries and frameworks</a> available, it is very hard to pinpoint the exact things you need to know for being a great web developer.</p><p>If you are really interested, you can start going through the technologies mentioned <a href="https://hackernoon.com/how-it-feels-to-learn-javascript-in-2016-d3a717dd577f">here</a>. Otherwise, a basic knowledge of HTML, CSS, and JavaScript can come in really handy.</p><h2 id="Final-words"><a href="#Final-words" class="headerlink" title="Final words"></a>Final words</h2><p>It goes unsaid that practice and implementation are the keys to learning and retaining. I hope the skills mentioned above help you upskill, and the lack of industry experience does not hamper your bright future!</p>]]></content>
      
      
      <categories>
          
          <category> Skills </category>
          
      </categories>
      
      
        <tags>
            
            <tag> #java </tag>
            
            <tag> #git </tag>
            
            <tag> #unit_testing </tag>
            
            <tag> #solid_design_principles </tag>
            
            <tag> #apache_tomcat </tag>
            
            <tag> #deployment </tag>
            
            <tag> #unix_commands </tag>
            
            <tag> #html </tag>
            
            <tag> #css </tag>
            
            <tag> #javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sliding Window Algorithm explained</title>
      <link href="/blog/sliding-window-algorithm-explained/"/>
      <url>/blog/sliding-window-algorithm-explained/</url>
      
        <content type="html"><![CDATA[<div style="clear: both;">  <div style="float: left; margin-right: 1em;">    <img src="image.gif" width="250"/>  </div>  <div>    In this blog, I am going to consolidate all the problems related to Sliding Window Algorithm which I have come across, from beginner level to advanced level. These are some notes which I found from my placement days, I hope they will help in advancing your knowledge from a basic to an advanced level. For an introductory article on this algorithm, you can go through <a href="https://www.geeksforgeeks.org/window-sliding-technique/">this</a>.  </div></div><p><ul><li><a href="#Longest-Substring-Without-Repeating-Characters">Longest Substring Without Repeating Characters</a></li><li><a href="#Longest-Substring-with-At-Most-Two-Distinct-Characters">Longest Substring with At Most Two Distinct Characters</a></li><li><a href="#Longest-Substring-with-At-Most-K-Distinct-Characters">Longest Substring with At Most K Distinct Characters</a></li><li><a href="#Longest-Substring-with-exact-K-distinct-Characters">Longest Substring with exact K distinct Characters</a></li></ul><h2 id="Longest-Substring-Without-Repeating-Characters"><a href="#Longest-Substring-Without-Repeating-Characters" class="headerlink" title="Longest Substring Without Repeating Characters"></a>Longest Substring Without Repeating Characters</h2><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><p>Given a string, find the length of the longest substring without repeating characters.</p><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><p>Input: “abcabcbb”<br>Output: 3<br>Explanation: The answer is “abc”, with the length of 3.</p><h3 id="Approach"><a href="#Approach" class="headerlink" title="Approach"></a>Approach</h3><p>Use HashSet to store the characters in the current window [i, j). Then we slide the index j to the right. If it is not in the HashSet, we slide j further. Doing so until s[j] is already in the HashSet. At this point, we found the maximum size of substrings without duplicate characters start with index i. If we do this for all i, we get our answer.</p><figure class="highlight plaintext"><figcaption><span>Dry Run : Longest Substring Without Repeating Characters</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">abcabcbb</span><br><span class="line">i</span><br><span class="line">j </span><br><span class="line">set = [a], ans = max(0, 0-0+1) = 1</span><br><span class="line">abcabcbb</span><br><span class="line">ij </span><br><span class="line">set = [a, b], ans = max(1, 1-0+1) = 2</span><br><span class="line">abcabcbb</span><br><span class="line">i j </span><br><span class="line">set = [a, b, c], ans = max(2, 2-0+1) = 3</span><br><span class="line">abcabcbb</span><br><span class="line">i  j </span><br><span class="line">repeating character found at j, so i++ and remove char at i from set</span><br><span class="line">set = [b, c]</span><br><span class="line">abcabcbb</span><br><span class="line"> i j </span><br><span class="line">set = [b, c, a], ans = max(3, 3-1+1) = 3</span><br><span class="line">abcabcbb</span><br><span class="line"> i  j </span><br><span class="line">repeating character found at j, so i++ and remove char at i from set</span><br><span class="line">set = [c, a]</span><br><span class="line">abcabcbb</span><br><span class="line">  i j </span><br><span class="line">set = [c, a, b], ans = max(3, 4-2+1) = 3</span><br><span class="line">abcabcbb</span><br><span class="line">  i  j</span><br><span class="line">repeating character found at j, so i++ and remove char at i from set</span><br><span class="line">set = [a, b]</span><br><span class="line">abcabcbb</span><br><span class="line">   i j </span><br><span class="line">set = [a, b, c], ans = max(3, 5-3+1) = 3</span><br><span class="line">abcabcbb</span><br><span class="line">   i  j </span><br><span class="line">repeating character found at j, so i++ and remove char at i from set</span><br><span class="line">set = [b, c]</span><br><span class="line">abcabcbb</span><br><span class="line">     ij</span><br><span class="line">repeating character found at j, so i++ and remove char at i from set</span><br><span class="line">set = [c]</span><br><span class="line">abcabcbb</span><br><span class="line">     ij</span><br><span class="line">set = [c, b], ans = max(3, 6-5+1) = 3</span><br><span class="line">abcabcbb</span><br><span class="line">     i j</span><br><span class="line">repeating character found at j, so i++ and remove char at i from set</span><br><span class="line">set = [b]</span><br><span class="line">abcabcbb</span><br><span class="line">      ij</span><br><span class="line">repeating character found at j, so i++ and remove char at i from set</span><br><span class="line">set = []</span><br></pre></td></tr></table></figure><figure class="highlight java"><figcaption><span>Code : Longest Substring Without Repeating Characters</span><a href="https://gist.github.com/deeheem/776ab95a6f7aca5a641dac019f555f0a">gist.java</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lengthOfLongestSubString</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> n = s.length();</span><br><span class="line">  Set&lt;Character&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">  <span class="keyword">int</span> ans = <span class="number">0</span>, i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> (i &lt; n &amp;&amp; j &lt; n) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!set.contains(s.charAt(j))) &#123;</span><br><span class="line">      set.add(s.charAt(j));</span><br><span class="line">      j++;</span><br><span class="line">      ans = Math.max(ans, j - i);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      set.remove(s.charAt(i));</span><br><span class="line">      i++;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Longest-Substring-with-At-Most-Two-Distinct-Characters"><a href="#Longest-Substring-with-At-Most-Two-Distinct-Characters" class="headerlink" title="Longest Substring with At Most Two Distinct Characters"></a>Longest Substring with At Most Two Distinct Characters</h2><h3 id="Problem-1"><a href="#Problem-1" class="headerlink" title="Problem"></a>Problem</h3><p>Given a string S, find the length of the longest substring T that contains at most two distinct characters.</p><h3 id="Example-1"><a href="#Example-1" class="headerlink" title="Example"></a>Example</h3><p>Input: “aabcd”<br>Output: 3<br>Explanation: The answer is “aab”, with the length of 3.</p><h3 id="Approach-1"><a href="#Approach-1" class="headerlink" title="Approach"></a>Approach</h3><p>We use a sliding window that always satisfies the condition where there are always at most two distinct characters in it. When we add a new character that breaks this condition, we move the starting pointer of our string.</p><figure class="highlight plaintext"><figcaption><span>Dry Run : Longest Substring with At Most Two Distinct Characters</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">aabcd</span><br><span class="line">i</span><br><span class="line">j</span><br><span class="line">k = 0 (character &#x27;a&#x27;)</span><br><span class="line">ans = max(0, 0-0+1) = 1</span><br><span class="line">aabcd</span><br><span class="line">ij</span><br><span class="line">k = 1 (characte &#x27;a&#x27;)</span><br><span class="line">ans = max(1, 1-0+1) = 2</span><br><span class="line">aabcd</span><br><span class="line">i j</span><br><span class="line">k = 2 (character &#x27;b&#x27;)</span><br><span class="line">ans = max(2, 2-0+1) = 3</span><br><span class="line">aabcd</span><br><span class="line">i  j</span><br><span class="line">more than two distict characters found, i++</span><br><span class="line">aabcd</span><br><span class="line"> i j</span><br><span class="line">more than two distict characters found, i++</span><br><span class="line">aabcd</span><br><span class="line">  ij</span><br><span class="line">ans = max(3, 3-2+1) = 3</span><br><span class="line">aabcd</span><br><span class="line">  i j</span><br><span class="line">more than two distict characters found, i++</span><br><span class="line">aabcd</span><br><span class="line">   ij</span><br><span class="line">ans = max(3, 4-3+1) = 3</span><br></pre></td></tr></table></figure><figure class="highlight java"><figcaption><span>Code : Longest Substring with At Most Two Distinct Characters</span><a href="https://gist.github.com/deeheem/098651e2f4bcee6da355b2b28e498be8">gist.java</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lengthOfLongestSubStringTwoDistinct</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = s.length();</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>, j = -<span class="number">1</span>, ans = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt; s.length(); k++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (s.charAt(k) == s.charAt(k - <span class="number">1</span>)) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (j &gt;= <span class="number">0</span> &amp;&amp; s.charAt(j) != s.charAt(k)) &#123;</span><br><span class="line">            ans = Math.max(ans, k - i);</span><br><span class="line">            i = j + <span class="number">1</span>;</span><br><span class="line">            j = k - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Math.max(ans, n - i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Longest-Substring-with-At-Most-K-Distinct-Characters"><a href="#Longest-Substring-with-At-Most-K-Distinct-Characters" class="headerlink" title="Longest Substring with At Most K Distinct Characters"></a>Longest Substring with At Most K Distinct Characters</h2><h3 id="Problem-2"><a href="#Problem-2" class="headerlink" title="Problem"></a>Problem</h3><p>An extension to the previous problem, but instead of 2 now you need to have k distinct characters in the substring.</p><h3 id="Example-2"><a href="#Example-2" class="headerlink" title="Example"></a>Example</h3><p>Input: s = “eceba”, k = 2<br>Output: 3<br>Explanation: The answer is “ece”, with the length of 3.</p><h3 id="Approach-2"><a href="#Approach-2" class="headerlink" title="Approach"></a>Approach</h3><p>This is similar to solving the previous problem with at most 2 distinct characters, but the only difference now is that we need to track the number of distinct characters as well, for which we use the help of a map.</p><figure class="highlight java"><figcaption><span>Code : Longest Substring with At Most K Distinct Characters</span><a href="https://gist.github.com/deeheem/b7d83b141c85bc3c9a3111df9faed98d">gist.java</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lengthOfLongestSubStringKDistinct</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = s.length();</span><br><span class="line">    <span class="keyword">int</span>[] count = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">256</span>];</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>, numDistinct = <span class="number">0</span>, ans = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; s.length(); j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (count[s.charAt(j)] == <span class="number">0</span>) &#123;</span><br><span class="line">            numDistinct++;</span><br><span class="line">        &#125;</span><br><span class="line">        count[s.charAt(j)]++;</span><br><span class="line">        <span class="keyword">while</span> (numDistinct &gt; <span class="number">2</span>) &#123;</span><br><span class="line">            count[s.charAt(i)]--;</span><br><span class="line">            <span class="keyword">if</span> (count[s.charAt(i)] == <span class="number">0</span>) &#123;</span><br><span class="line">                numDistinct--;</span><br><span class="line">            &#125;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        ans = Math.max(ans, j - i + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Longest-Substring-with-exact-K-distinct-Characters"><a href="#Longest-Substring-with-exact-K-distinct-Characters" class="headerlink" title="Longest Substring with exact K distinct Characters"></a>Longest Substring with exact K distinct Characters</h2><h3 id="Problem-3"><a href="#Problem-3" class="headerlink" title="Problem"></a>Problem</h3><p>Given an array A of positive integers, find the number of subarrays with exactly K number of distinct characters.</p><h3 id="Example-3"><a href="#Example-3" class="headerlink" title="Example"></a>Example</h3><p>Input: A = [1,2,1,2,3], K = 2<br>Output: 7<br>Explanation: Subarrays formed with exactly 2 different integers: [1,2], [2,1], [1,2], [2,3], [1,2,1], [2,1,2], [1,2,1,2].</p><h3 id="Approach-1-Smart-Work"><a href="#Approach-1-Smart-Work" class="headerlink" title="Approach 1 (Smart Work)"></a>Approach 1 (Smart Work)</h3><p>If we are aware of how to find subarrays with “at most k different characters”, then we can extend the above algorithm to find the number of subarrays with “exactly k different characters” using the equation: </p><div align="center">  <code>exactly(K) = atMost(K) — atMost(K-1)</code></div><figure class="highlight java"><figcaption><span>Code : Longest Substring with exact K distinct Characters</span><a href="https://gist.github.com/deeheem/0e8491c55cb91207e5d478e4a8000c68">gist.java</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lengthOfLongestSubStringAtMostKDistinct</span><span class="params">(String s, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> n = s.length();</span><br><span class="line">  <span class="keyword">int</span>[] count = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">256</span>];</span><br><span class="line">  <span class="keyword">int</span> i = <span class="number">0</span>, numDistinct = <span class="number">0</span>, ans = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; s.length(); j++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (count[s.charAt(j)] == <span class="number">0</span>) &#123;</span><br><span class="line">      numDistinct++;</span><br><span class="line">    &#125;</span><br><span class="line">    count[s.charAt(j)]++;</span><br><span class="line">    <span class="keyword">while</span> (numDistinct &gt; k) &#123;</span><br><span class="line">      count[s.charAt(i)]--;</span><br><span class="line">      <span class="keyword">if</span> (count[s.charAt(i)] == <span class="number">0</span>) &#123;</span><br><span class="line">        numDistinct--;</span><br><span class="line">      &#125;</span><br><span class="line">      i++;</span><br><span class="line">    &#125;</span><br><span class="line">    ans = Math.max(ans, j - i + <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lengthOfLongestSubStringKDistinctIntegers</span><span class="params">(String s, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> lengthOfLongestSubStringAtMostKDistinct(s, k)</span><br><span class="line">      - lengthOfLongestSubStringAtMostKDistinct(s, k - <span class="number">1</span>);</span><br></pre></td></tr></table></figure><h3 id="Approach-2-Hard-Work"><a href="#Approach-2-Hard-Work" class="headerlink" title="Approach 2 (Hard Work)"></a>Approach 2 (Hard Work)</h3><p><a href="https://leetcode.com/problems/subarrays-with-k-different-integers/discuss/235235/C%2B%2BJava-with-picture-prefixed-sliding-window">Visit this link to learn more about this approach.</a>   </p>]]></content>
      
      
      <categories>
          
          <category> Algorithms </category>
          
      </categories>
      
      
        <tags>
            
            <tag> #sliding_window </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Interaction of Children with an Augmented Reality Smartphone App</title>
      <link href="/blog/interaction-of-children-with-an-augmented-reality-smartphone-app/"/>
      <url>/blog/interaction-of-children-with-an-augmented-reality-smartphone-app/</url>
      
        <content type="html"><![CDATA[<h2 id="Link-to-Research-Paper"><a href="#Link-to-Research-Paper" class="headerlink" title="Link to Research Paper"></a>Link to Research Paper</h2><p><a href="https://link.springer.com/article/10.1007/s41870-020-00460-6">Interaction of Children with an Augmented Reality Smartphone App</a></p><h2 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h2><p>Many children now get access to smartphones by two years of age and gradually learn to operate them. The objective of this study was to determine the age at which children become capable of using smartphone apps with augmented reality. We developed an augmented reality smartphone app in C# and studied the interaction of 60 children aged between two and eight years with it. We conducted a preference test to determine the interest of the children in using the app and a proficiency test to determine the ability of the children to use the app. We observed that 5% children aged two and three years, 25% children aged four to six years, and 55% children aged seven and eight years were interested in playing with the app. The children below the age of seven years were overwhelmed by the interplay of real and virtual objects displayed on the screen, and did not prefer playing with the app. Alternatively, the seven and eight year old children were able to use the app and were enthusiastic about it. However, the seven and eight year old children required 39.78% more time to use the app when compared with a similar app without aug- mented reality. We concluded that children develop skills necessary to use augmented reality software by the age of seven years. We recommend that augmented reality be used in educational apps for children aged seven years and more to enhance their learning experience.</p><p><img src="/blog/interaction-of-children-with-an-augmented-reality-smartphone-app/image.png"></p>]]></content>
      
      
      <categories>
          
          <category> Research Papers </category>
          
      </categories>
      
      
        <tags>
            
            <tag> #android </tag>
            
            <tag> #augmented_reality </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Simulation of Steering a Self-Driving Car Using 1) PID Controller 2) Neural Network</title>
      <link href="/blog/simulation-of-steering-a-self-driving-car-using-pid-controller-and-neural-network/"/>
      <url>/blog/simulation-of-steering-a-self-driving-car-using-pid-controller-and-neural-network/</url>
      
        <content type="html"><![CDATA[<h2 id="Link-to-Research-Paper"><a href="#Link-to-Research-Paper" class="headerlink" title="Link to Research Paper"></a>Link to Research Paper</h2><p><a href="https://ieeexplore.ieee.org/document/8987865">Simulation of Steering a Self-Driving Car Using 1) PID Controller 2) Neural Network</a></p><h2 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h2><p>Over the last few years, self-driving vehicles have expanded dramatically. They look promising in decreasing traffic accidents and congestion on roads. In order for this approach to work, simulations tend to be a cheaper, more efficient, and a safer way than live testing. In this paper, we present a simulator that tests the self-driving car’s <acronym title="Convolution Neural Network">CNN</acronym> model in a virtual environment. To avoid the hassle of collecting huge amount of training and testing data for preliminary testing, we also propose a method to collect data (images, steering value and throttle value) using <acronym title="Proportional, Integral, Derivative">PID</acronym> controllers in the virtual environment itself.</p><p><img src="/blog/simulation-of-steering-a-self-driving-car-using-pid-controller-and-neural-network/image.jpeg"></p>]]></content>
      
      
      <categories>
          
          <category> Research Papers </category>
          
      </categories>
      
      
        <tags>
            
            <tag> #android </tag>
            
            <tag> #machine_learning </tag>
            
            <tag> #virtual_reality </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Enhancing the Learning Experience with Pop-Up Feature in Flying Dictionary Android Application</title>
      <link href="/blog/enhancing-the-learning-experience-with-pop-up-feature-in-flying-dictionary-android-application/"/>
      <url>/blog/enhancing-the-learning-experience-with-pop-up-feature-in-flying-dictionary-android-application/</url>
      
        <content type="html"><![CDATA[<h2 id="Link-to-Research-Paper"><a href="#Link-to-Research-Paper" class="headerlink" title="Link to Research Paper"></a>Link to Research Paper</h2><p><a href="https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9007254">Enhancing the Learning Experience with Pop-Up Feature in Flying Dictionary Android Application</a></p><h2 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h2><p>We develop an Android application “Flying Dictionary” which is an offline pop-up dictionary meant to ease users by displaying the meaning of the words they find tough without having to switch to some other app in order to look for its meaning. The application was created and uploaded on Play Store in March 2017, and since then over 5000 users have installed it on their Android devices. With a current rating of 4.8 (as of May 2018), our aim is to make it easier for otherwise reluctant students to encourage learning new words with ease and at the click of a button. This paper analyses the impact of using the application for daily look-up of meanings, on users’ learning experience. The analysis indicates that providing the users with the ability to glance the meanings on the go helps them in learning more new words and prevents them from giving excuses like the need for an online connection or the need for switching the app in order to look for the meaning. This contributes to the growing importance of the pop-up feature and emphasizes the need to incorporate this in the popular dictionary apps as well as try and bring up the feature as a built-in utility in the Android OS itself.</p><div style="display: flex; justify-content: center;">    <div style="margin-right: 5px;"><img id ="ttl" src="image1.jpg"></div>    <div style="margin-left: 5px;"><img id ="se" src="image2.jpg"></div></div><h2 id="App-Demo"><a href="#App-Demo" class="headerlink" title="App Demo"></a>App Demo</h2><div class="video-container"><iframe src="https://www.youtube.com/embed/YR0EqhVdUSc" frameborder="0" loading="lazy" allowfullscreen></iframe></div>]]></content>
      
      
      <categories>
          
          <category> Research Papers </category>
          
      </categories>
      
      
        <tags>
            
            <tag> #android </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
